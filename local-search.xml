<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>springMvc注解及其用法</title>
    <link href="/2023/08/16/springMvc%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/"/>
    <url>/2023/08/16/springMvc%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="springMvc注解及其用法"><a href="#springMvc注解及其用法" class="headerlink" title="springMvc注解及其用法"></a>springMvc注解及其用法</h1><ol><li><p><code>@Controller</code>：用于标识一个类为控制器，处理请求并返回响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">// 控制器方法...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RestController</code>：与<code>@Controller</code>类似，但它还会自动将方法的返回值转换为JSON格式，常用于构建RESTful API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">// 控制器方法...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RequestMapping</code>：用于将请求映射到方法或类上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userList&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>：用于将GET、POST、PUT、DELETE请求映射到方法上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@PathVariable</code>：用于从URL路径中获取路径变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RequestParam</code>：用于从请求参数中获取参数的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RequestBody</code>：用于将请求体中的JSON或XML数据绑定到方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ResponseBody</code>：用于将方法的返回值直接作为响应体返回给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ModelAttribute</code>：用于将请求参数绑定到方法的参数上，并将其添加到模型中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@ModelAttribute(&quot;user&quot;)</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userDetail&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@Valid</code>：用于启用参数的校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>@ControllerAdvice<br>作用：<br>1、全局异常处理<br>2、全局数据绑定<br>3、全局数据预处理<br>示例:<br>使用 @ControllerAdvice 实现全局异常处理，只需要定义类，添加该注解即可定义方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">customException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        mv.addObject(<span class="hljs-string">&quot;message&quot;</span>, e.getMessage());<br>        mv.setViewName(<span class="hljs-string">&quot;myerror&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ExceptionHandler</code>：处理控制器方法中抛出的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception ex)</span> &#123;<br>        <span class="hljs-comment">// 处理异常...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-string">&quot;Error occurred&quot;</span>, HttpStatus.INTERNAL_SERVER_ERROR);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>注解</tag>
      
      <tag>restful风格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夕阳API开放平台</title>
    <link href="/2023/08/03/%E5%A4%95%E9%98%B3API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    <url>/2023/08/03/%E5%A4%95%E9%98%B3API%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="夕阳Api开放平台"><a href="#夕阳Api开放平台" class="headerlink" title="夕阳Api开放平台"></a><center>夕阳Api开放平台</center></h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库表字段设计注意事项</title>
    <link href="/2023/08/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2023/08/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库-Mysql-设计优化"><a href="#数据库-Mysql-设计优化" class="headerlink" title="数据库(Mysql)设计优化"></a>数据库(Mysql)设计优化</h1><h2 id="Int数据类型"><a href="#Int数据类型" class="headerlink" title="Int数据类型"></a>Int数据类型</h2><h3 id="int、bigint、smallint-和-tinyint的区别"><a href="#int、bigint、smallint-和-tinyint的区别" class="headerlink" title="int、bigint、smallint 和 tinyint的区别"></a>int、bigint、smallint 和 tinyint的区别</h3><table><thead><tr><th align="center">数据类型</th><th>范围</th><th>存储大小</th></tr></thead><tbody><tr><td align="center">bigint</td><td>-2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807)</td><td>8字节</td></tr><tr><td align="center">int</td><td>-2^31 (-2,147,483,648) 到 2^31 – 1 (2,147,483,647) 的整型数据</td><td>4字节</td></tr><tr><td align="center">smallint</td><td>-2^15 (-32,768) 到 2^15 – 1 (32,767) 的整型数据</td><td>2字节</td></tr><tr><td align="center">tinyint</td><td>无符号（unsigned）： 0 到 255 的整型数据；未设置无符号：-128到127</td><td>1字节</td></tr></tbody></table><ul><li><font color="red"><em><strong>int(M) 在 integer 数据类型中，M 表示最大显示宽度。在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。和数字位数也无关系 int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。</strong></em></font></li></ul><h3 id="tinyint的详解"><a href="#tinyint的详解" class="headerlink" title="tinyint的详解"></a>tinyint的详解</h3><h4 id="tinyint有符号和无符号"><a href="#tinyint有符号和无符号" class="headerlink" title="tinyint有符号和无符号"></a>tinyint有符号和无符号</h4><ol><li>tinyint 型的字段如果设置为UNSIGNED类型,只能存储从0到255的整数,不能用来储存负数。</li><li>tinyint 型的字段如果不设置UNSIGNED类型,存储-128到127的整数。</li><li>关于加上unsigned后的说明：加上unsigned属性后就是无符号(范围是0~255的整数,因为是整数,不会有符号”-“,所以就是无符号)</li><li>关于加上zerofill后的说明：zerofill属性会把unsigned属性也给带上,这样就是无符号（范围是0~255，显示长度就是3），同时还会<br>进行前导零填充（没有达到显示长度的数值，例如：你插入1，显示的是001）。</li><li>不加unsigned和zerofill的说明：字段后面不加上这两个属性中的任何一个,就表示是有符号(范围是-128~127,因为有符号”-“,所有是有符号)。</li></ol><h4 id="tinyint-M-详解"><a href="#tinyint-M-详解" class="headerlink" title="tinyint(M)详解"></a>tinyint(M)详解</h4><ul><li><font color="red">*** tinyint后面的括号带的数字,以后称之为M,和存贮的值没有任何关系,只是在某些情况下和显示的宽度有关系。***</font></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-----------------------------------------</span><br><span class="hljs-comment">-- 验证tinyint是否设置符号区别</span><br><span class="hljs-comment">-----------------------------------------</span><br><span class="hljs-comment">-- 创建表test，设置无符号类型tinyint</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `test` (<br>`id` <span class="hljs-type">INT</span> ( <span class="hljs-number">11</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`str` <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">255</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`state` TINYINT ( <span class="hljs-number">1</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`state2` TINYINT ( <span class="hljs-number">2</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`state3` TINYINT ( <span class="hljs-number">3</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`state4` TINYINT ( <span class="hljs-number">4</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY ( `id` ) <br>) ENGINE <span class="hljs-operator">=</span> MyISAM AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">254</span>,<span class="hljs-number">254</span>,<span class="hljs-number">254</span>,<span class="hljs-number">254</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test;<br><span class="hljs-comment">------------------------------------------</span><br>idstrstatestate2state3state4<br><span class="hljs-number">6</span>csdn<span class="hljs-number">6</span>   <span class="hljs-number">06</span> <span class="hljs-number">006</span> <span class="hljs-number">0006</span><br><span class="hljs-number">7</span>csdn<span class="hljs-number">66</span>   <span class="hljs-number">66</span> <span class="hljs-number">066</span> <span class="hljs-number">0066</span><br><span class="hljs-number">8</span>csdn<span class="hljs-number">254</span>   <span class="hljs-number">254</span> <span class="hljs-number">254</span> <span class="hljs-number">0254</span><br><span class="hljs-number">9</span>csdn<span class="hljs-number">255</span>   <span class="hljs-number">255</span> <span class="hljs-number">255</span> <span class="hljs-number">0255</span><br><span class="hljs-comment">------------------------------------------</span><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>有符号<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">127</span>,<span class="hljs-number">127</span>,<span class="hljs-number">127</span>,<span class="hljs-number">127</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testtiny;<br><br><span class="hljs-comment">------------------------------------------</span><br>idstr  state state2 state3 state4<br><span class="hljs-number">6</span>csdn<span class="hljs-number">6</span>  <span class="hljs-number">6</span>      <span class="hljs-number">6</span>       <span class="hljs-number">6</span><br><span class="hljs-number">7</span>csdn<span class="hljs-number">66</span>  <span class="hljs-number">66</span>  <span class="hljs-number">66</span>       <span class="hljs-number">66</span><br><span class="hljs-number">8</span>csdn<span class="hljs-number">100</span>  <span class="hljs-number">100</span>  <span class="hljs-number">100</span>      <span class="hljs-number">100</span><br><span class="hljs-number">9</span>csdn<span class="hljs-number">127</span>  <span class="hljs-number">127</span>  <span class="hljs-number">12</span>       <span class="hljs-number">127</span><br><span class="hljs-comment">------------------------------------------</span><br></code></pre></td></tr></table></figure><h2 id="varchar数据类型"><a href="#varchar数据类型" class="headerlink" title="varchar数据类型"></a>varchar数据类型</h2><p><em><strong>varchar 存储分为两部分：</strong></em></p><p><strong>archar字段长度 &#x3D; 字符串长度值 + 实际数据长度 N。</strong></p><p>字符串长度值,实际数据长度，需占用 1 或 2 个字节存储。因此我们得出：</p><ul><li>当实际数据长度 &lt;&#x3D; 255 时，varchar字段长度 &#x3D; 1 + N；</li><li>当实际数据长度 &gt; 255 时， varchar字段长度 &#x3D; 2 + N;</li></ul><p>varchar主要根据字段实际使用的长度来分配存储空间</p><p><strong>在数据库设计时，为了节约磁盘存储空间和内存空间，以及应用程序处理效率，建议采用如下方案</strong></p><ul><li><p><strong>字符串实际数据长度N</strong></p></li><li><p><strong>0 &lt; N &lt; &#x3D; 64</strong></p></li></ul><p>​根据实际数据长度N，选择一个相近的2^n长度：</p><p><strong>例如：</strong><br><code> varchar(8),varchar(16),varchar(32),varchar(64)</code></p><p><strong>例子：</strong></p><p>手机号11位，可以选择varchar(16)</p><p><strong>原因：</strong></p><p>1 bytes &#x3D; 8 bit ,一个字节最多可以代表的数据长度是2的8次方 11111111 在计算机中也就是-128到127。</p><p>使用2 ^ n长度使更好的对齐磁盘或内存块。</p><p>对齐块更快。如今“块”的大小更大，内存和磁盘足够快，可以忽略对齐，但对于非常大的块来说是非常重要的。</p><p>64 &lt; N</p><p>根据实际数据长度N，选择一个相近的2^n-1长度：</p><p><strong>例如：</strong><br>varchar(127),varchar(255),varchar(511)，…</p><p><strong>例子：</strong></p><ul><li>收货地址接近100个字符，那么可以选择varchar(127)</li><li>商品名称，接近256个字符，可以选择varchar(255）</li></ul><p><strong>原因：</strong></p><ul><li><p>方便InnoDB建索引，对于 MyISAM，可以对前 1000 个字节做索引，对于 InnoDB，则只有 767 字节。（来源依据）。255X3&#x3D;765</p></li><li><p>少申请一个字节，记录字符串长度，一个8位的tinyint，可以表示的无符号数值的范围是，0-255，如果长度超过了255，需要在申请个字节。</p></li><li><p>磁盘块和内存块对齐</p></li></ul><p><strong>补充说明：</strong><br>varchar(N)长度并不是越长，越好，需要选择一个合适的长度。</p><p>因为：在内存中的操作方式，varchar也是按照最长的方式在内存中进行操作的。比如说要进行排序的时候，varcahr(100)是按照100这个长度来进行的，不合理的长度会浪费内存空间。</p><hr><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/f156ca544bdc9d8e86d3e025a2fd1fdc.png"></p><ul><li><p>固定长度。</p></li><li><p>保存值时，去掉末尾的空格。</p></li><li><p>char常用于很短字符串或长度近似相同的字符串的时候很有用。如存储用户密码的MD5哈希值，它的长度总是一样的。</p></li></ul><p><strong>char优于varchar的地方？</strong></p><ol><li><p>对于经常改变的值，char优于varchar，因为固定长度行不容易产生碎片。——当最长长度远大于平均长度，并且很少发生更新的时候，通常适合使用varchar。</p></li><li><p>对于很短的列，char的效率也是高于varchar的。如对于单字节字符集(如latin1)，char(1)只会占用1个字节，而varchar(2)会占用2个字节(有一个字节用来存储长度的信息)。</p></li></ol><hr><h3 id="varchar"><a href="#varchar" class="headerlink" title="varchar"></a>varchar</h3><ul><li><p>保存可变长字符串。</p><p>理解：比固定长度占用更少的存储空间，因为它只占用自己需要的空间。例外情况：使用ROW_FORMAT&#x3D;FIXED创建的MyISAM表，它为每行使用固定长度的空间，可能会造成浪费。</p></li><li><p>存储长度信息。如果定义的列小于或等于255，则使用1个字节存储长度值，假设使用latin1字符集，如varchar(10)将占用11个字节的存储空间。反过来，varchar(1000)，则占用1002个字节的存储空间。</p></li><li><p>节约空间，对性能有帮助。</p></li><li><p>5.0版本以上，无论是取值还是保存，MySQL都会保留字符串末尾的空格。只分配真正需要的空间</p></li><li><p>使用varchar(5)和varchar(200)保存’hello’占用空间是一样的。——这里应该指的是磁盘上的空间。</p></li><li><p>那么使用较短列有何优势？——巨大的优势</p><p>较大的列会使用更多的内存，因为MySQL通常会分配固定大小的内存块(如varchar(200)会用200个字符大小的内存空间)来保存值(然后对值进行trim操作，最后放入磁盘)或取值。——这对排序或使用基于内存的临时表尤其不好。</p></li></ul><h2 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h2><p><strong>用于保存大量数据:</strong></p><ul><li><p>InnoDB在它们较大的时候会使用“外部”存储区域来进行保存。——所以需要足够的外部存储空间来保存实际的值。</p></li><li><p>排序方式不同于其他字符类型，不会按照完整长度进行排序，而只是按照max_sort_length规定的前若干个字节进行排序。</p></li></ul><h2 id="ENUM-枚举-类型"><a href="#ENUM-枚举-类型" class="headerlink" title="ENUM(枚举)类型"></a>ENUM(枚举)类型</h2><p><strong>特点及优点</strong>:</p><ul><li><p>ENUM(枚举)列可以存储65 535个不同的字符串。</p></li><li><p>以紧凑方式保存。根据列表中值的数量，把它们压缩到1到2个字节中。</p></li><li><p>MySQL在内部把每个值都保存为整数，以表示值在列表中的位置。</p></li><li><p>保留了一份“查找表”，来表示整数和字符串在表的.frm文件中的映射关系。</p></li><li><p>ENUM字符列是固定的，添加、删除字符串须使用ALTER TABLE。</p></li><li><p>在对enum列使用order by的时候，是按数字排序的，而不是字符串排序。</p></li></ul><p><strong>使用案例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_enum_example`  (   <br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,   <br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,   <br>    `color` enum(<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  <br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE ) <br>    ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br></code></pre></td></tr></table></figure><p>新建了一张 t_enum_example 表，主要有 id、name、color  3 个字段，这里可以看到，color 字段用 ENUM 类型来定义。ENUM 字段显示的是字符串，但是底层是用整型保存的，每个枚举值都有一个对应的索引，从 1 开始，如下图。</p><table><thead><tr><th>枚举值</th><th>索引</th></tr></thead><tbody><tr><td>blue</td><td>1</td></tr><tr><td>green</td><td>2</td></tr><tr><td>red</td><td>3</td></tr></tbody></table><p>比如，这里要给这张表新增数据，可以这样来新增</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">INSERT INTO `t_enum_example`(`name`, `color`) VALUES (&#x27;笔&#x27;, &#x27;blue&#x27;); <br></code></pre></td></tr></table></figure><p>或者这样</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">INSERT INTO `t_enum_example`(`name`, `color`) VALUES (&#x27;笔&#x27;, 2); <br></code></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th align="center">id</th><th>name</th><th>color</th></tr></thead><tbody><tr><td align="center">1</td><td>笔</td><td>blue</td></tr><tr><td align="center">2</td><td>笔</td><td>red</td></tr><tr><td align="center">3</td><td>笔</td><td>green</td></tr></tbody></table><p>基本用法就是这样，那该不该用 ENUM 类型来定义字段呢，我觉得最好不要用，只要有下面几个点：</p><p><strong>缺点</strong></p><ul><li><p>容易混淆</p><ul><li>因为ENUM 字段底层其实是用整型来存储，比如如果用 ENUM 来存储字符串 ‘3’、’2’、’1’ 这样的数字字符串，那对应的索引就是 1、2、3，要是不熟悉的开发人员，很容易就会造成混淆，新增错误的数据。</li></ul></li><li><p>修改字段频繁</p><ul><li>我们知道对于<a href="https://www.zhihu.com/search?q=%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1318588502%7D">枚举类型</a>，是很有可能会随时增加的，比如上面例子中的 color 字段，要增加一种颜色 ‘black’，那就要修改字段，给字段的<a href="https://www.zhihu.com/search?q=%E6%9E%9A%E4%B8%BE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1318588502%7D">枚举</a>类型增加一种颜色枚举。如果每增加一个枚举，就要修改字段，那代价就太大了。所以一般这种存储类型的字段建议用 TINYINT 来存储。</li></ul></li></ul><h2 id="Data日期时间类型"><a href="#Data日期时间类型" class="headerlink" title="Data日期时间类型"></a>Data日期时间类型</h2><p><strong>一、日期时间型</strong></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/7f50a306b192573246477b93228ec25.png" alt="7f50a306b192573246477b93228ec25"></p><p><strong>二、日期时间型存储需求</strong></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/956f98af386ea93b550c198a0d96c0f.png" alt="956f98af386ea93b550c198a0d96c0f"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>优化</tag>
      
      <tag>资源节省</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typro配置图床阿里云OSS</title>
    <link href="/2023/07/31/typro%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    <url>/2023/07/31/typro%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A%E9%98%BF%E9%87%8C%E4%BA%91OSS/</url>
    
    <content type="html"><![CDATA[<h1>  <center><font color="yellow">typro配置图床</font></center>  </h1><ul><li><p>山东大学镜像源下载pggo</p><p><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo</a></p></li><li><p>打开pggo配置阿里云oss(自定义域名和网络后缀可不用设置)</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230731010032432.png" alt="image-20230731010032432"></p></li><li><p>设置typro图片上传如下图：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230731010142777.png" alt="image-20230731010142777"></p></li><li><p>点击验证图片上传选项，显示success即为成功</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>typro配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typro</tag>
      
      <tag>教程</tag>
      
      <tag>图床</tag>
      
      <tag>阿里云OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redisson的第一次使用</title>
    <link href="/2023/07/30/Redisson%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/30/Redisson%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Redisson的简单使用"><a href="#Redisson的简单使用" class="headerlink" title="Redisson的简单使用"></a>Redisson的简单使用</h1><h2 id="Redisson的快速开始"><a href="#Redisson的快速开始" class="headerlink" title="Redisson的快速开始"></a>Redisson的快速开始</h2><ol><li><p>引入依赖(建议不要使用springboot-starter，版本更迭快)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>新建RedissonConfig配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Redisson配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span> <span class="hljs-comment">//读取application.yml配置</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> String host;  <span class="hljs-comment">//yml中的redis.host映射</span><br>    <span class="hljs-keyword">private</span> String port;  <span class="hljs-comment">//yml中的redis.port映射</span><br>    <span class="hljs-keyword">private</span> Integer database;  <span class="hljs-comment">//yml中的redis.database映射</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;reids://%s:%s&quot;</span>,host,port);<br>        <span class="hljs-comment">//尽量不写死,adress为http地址，http://127.0.0.1:6379/</span><br>        config.useSingleServer()<br>                .setAddress(address)<br>                .setDatabase(database);<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>简单的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//后续使用</span><br><span class="hljs-meta">@Scheduled(cron = &quot;0 4 0 * * *&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCacheRecommendUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;system:precachejob:docache:lock&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">0</span>,<span class="hljs-number">30000</span>, TimeUnit.MILLISECONDS))&#123; <span class="hljs-comment">//l:等待时间,为0表示获取锁失败，就不再尝试再次获取锁,l1:锁的过期时间</span><br><br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception exception)&#123;<br><br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread())&#123; <span class="hljs-comment">//判断要释放锁的线程是否为当前线程</span><br>                lock.unlock(); <span class="hljs-comment">//释放锁</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>3.1 锁续命(看门狗机制)</p><p>实现: 开启一个监听线程，如果方法没有实现完，就给锁续期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">lock.tryLock(<span class="hljs-number">0</span>,<span class="hljs-number">30000</span>, TimeUnit.MILLISECONDS)<br>-&gt; lock.tryLock(<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>, TimeUnit.MILLISECONDS)<br><span class="hljs-comment">//将l1参数改为-1，即可开启看门狗机制（锁续命）</span><br></code></pre></td></tr></table></figure><p>原理：</p><ol><li>任务未执行完成，每十秒续期一次，默认续期三十秒</li><li>如果线程挂掉，（debug）模式下，会被认为服务器宕机，看门狗机制不会生效。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人笔记</title>
    <link href="/2023/07/30/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/30/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<center><font color="blue">苦逼程序员的日常</font></center><ul><li>早起第一件事修理第一天没处理好的博客</li><li>第二天网站进不去</li><li>第三天修修补补还是进不去</li><li>崩溃了</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/30/hello-world/"/>
    <url>/2023/07/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
