<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring事务</title>
    <link href="/2023/09/18/Spring%E4%BA%8B%E5%8A%A1/"/>
    <url>/2023/09/18/Spring%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h2 id="事务的四大特性（ACID）"><a href="#事务的四大特性（ACID）" class="headerlink" title="事务的四大特性（ACID）"></a>事务的四大特性（ACID）</h2><ul><li>原子性</li><li>持久性</li><li>隔离性</li><li>一致性</li></ul><h2 id="spring事务的两种实现"><a href="#spring事务的两种实现" class="headerlink" title="spring事务的两种实现"></a>spring事务的两种实现</h2><ol><li>编程实现<ol><li>TransactionTemplate</li><li>TransactionManager</li></ol></li><li>注解实现（aop）（）推荐使用</li></ol><h2 id="事务的五大属性"><a href="#事务的五大属性" class="headerlink" title="事务的五大属性"></a>事务的五大属性</h2><ul><li>隔离级别</li><li>是否只读</li><li>回滚规则</li><li>事务超时</li><li>传播行为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回事务的传播行为，默认值为 REQUIRED。</span><br> <span class="hljs-type">int</span> <span class="hljs-title function_">getPropagationBehavior</span><span class="hljs-params">()</span>;<br> <span class="hljs-comment">//返回事务的隔离级别，默认值是 DEFAULT</span><br> <span class="hljs-type">int</span> <span class="hljs-title function_">getIsolationLevel</span><span class="hljs-params">()</span>;<br> <span class="hljs-comment">// 返回事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</span><br> <span class="hljs-type">int</span> <span class="hljs-title function_">getTimeout</span><span class="hljs-params">()</span>;<br> <span class="hljs-comment">// 返回是否为只读事务，默认值为 false</span><br> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReadOnly</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h3 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为:"></a>传播行为:</h3><p><strong>定义</strong>:</p><p>事务传播行为是为了解决业务层方法之间互相调用的事务问题(当事务方法被另一个事务方法调用时，必须指定事务应该如何传播)</p><p><strong>实现</strong>：</p><p>枚举类：<code>Propagation</code></p><p>Propagation的数值作用：</p><ol><li><p><strong>TransactionDefinition.PROPAGATION_REQUIRED</strong></p><ol><li><p>如果外部方法没有开启事务的话，<code>Propagation.REQUIRED</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</p></li><li><p>如果外部方法开启事务并且被<code>Propagation.REQUIRED</code>的话，所有<code>Propagation.REQUIRED</code>修饰的内部方法和外部方法均属于同一事务 ，只要一个方法回滚，整个事务均回滚。</p></li></ol></li><li><p><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW</strong></p><p>创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，<code>Propagation.REQUIRES_NEW</code>修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</p></li><li><p><strong>TransactionDefinition.PROPAGATION_NESTED</strong></p><p>如果当前存在事务，就在嵌套事务内执行；如果当前没有事务，就执行与<code>TransactionDefinition.PROPAGATION_REQUIRED</code>类似的操作。也就是说：</p><ul><li>在外部方法开启事务的情况下，在内部开启一个新的事务，作为嵌套事务存在。</li><li>如果外部方法无事务，则单独开启一个事务，与 <code>PROPAGATION_REQUIRED</code> 类似。</li></ul></li><li><p><strong>TransactionDefinition.PROPAGATION_MANDATORY</strong></p><p>如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</p><p>这个使用的很少，就不举例子来说了。</p><p><strong>若是错误的配置以下 3 种事务传播行为，事务将不会发生回滚，这里不对照案例讲解了，使用的很少。</strong></p><ul><li><strong><code>TransactionDefinition.PROPAGATION_SUPPORTS</code></strong>: 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><strong><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code></strong>: 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><strong><code>TransactionDefinition.PROPAGATION_NEVER</code></strong>: 以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul></li></ol><h3 id="事务隔离级别："><a href="#事务隔离级别：" class="headerlink" title="事务隔离级别："></a>事务隔离级别：</h3><p><code>TransactionDefinition</code> 接口中定义了五个表示隔离级别的常量</p><p>枚举类：<code>Isolation</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),<br><br> READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),<br><br> READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),<br><br> REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),<br><br> SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);<br><br></code></pre></td></tr></table></figure><ul><li><p><strong><code>TransactionDefinition.ISOLATION_DEFAULT</code></strong> :使用后端数据库默认的隔离级别，MySQL 默认采用的 <code>REPEATABLE_READ</code> 隔离级别 Oracle 默认采用的 <code>READ_COMMITTED</code> 隔离级别.</p></li><li><p><strong><code>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code></strong> :最低的隔离级别，使用这个隔离级别很少，因为它允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></p></li><li><p><strong><code>TransactionDefinition.ISOLATION_READ_COMMITTED</code></strong> : 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></p></li><li><p><strong><code>TransactionDefinition.ISOLATION_REPEATABLE_READ</code></strong> : 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></p></li><li><p><strong><code>TransactionDefinition.ISOLATION_SERIALIZABLE</code></strong> : 最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p></li></ul><h3 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 <code>TransactionDefinition</code> 中以 int 的值来表示超时时间，其单位是秒，默认值为-1，这表示事务的超时时间取决于底层事务系统或者没有超时时间。</p><h3 id="事务只读属性"><a href="#事务只读属性" class="headerlink" title="事务只读属性"></a>事务只读属性</h3><ul><li><p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持 SQL 执行期间的读一致性；</p></li><li><p>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询 SQL 必须保证整体的读一致性，否则，在前条 SQL 查询之后，后条 SQL 查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持</p></li></ul><h3 id="事务回滚规则："><a href="#事务回滚规则：" class="headerlink" title="事务回滚规则："></a>事务回滚规则：</h3><p>默认情况下，事务只有遇到运行期异常（<code>RuntimeException</code> 的子类）时才会回滚，<code>Error</code> 也会导致事务回滚，但是，在遇到检查型（Checked）异常时不会回滚。</p><p>回滚你定义的特定的异常类型 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor= MyException.class)</span><br></code></pre></td></tr></table></figure><h2 id="Transactional-的常用配置参数总结（-5-个常用的）："><a href="#Transactional-的常用配置参数总结（-5-个常用的）：" class="headerlink" title="@Transactional 的常用配置参数总结（ 5 个常用的）："></a><strong><code>@Transactional</code> 的常用配置参数总结（ 5 个常用的）：</strong></h2><table><thead><tr><th align="left">属性名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">propagation</td><td align="left">事务的传播行为，默认值为 REQUIRED，可选的值在上面介绍过</td></tr><tr><td align="left">isolation</td><td align="left">事务的隔离级别，默认值采用 DEFAULT，可选的值在上面介绍过</td></tr><tr><td align="left">timeout</td><td align="left">事务的超时时间，默认值为-1（不会超时）。如果超过该时间限制但事务还没有完成，则自动回滚事务。</td></tr><tr><td align="left">readOnly</td><td align="left">指定事务是否为只读事务，默认值为 false。</td></tr><tr><td align="left">rollbackFor</td><td align="left">用于指定能够触发事务回滚的异常类型，并且可以指定多个异常类型。</td></tr></tbody></table><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><strong><code>@Transactional</code> 的工作机制是基于 AOP 实现的，AOP 又是使用动态代理实现的。如果目标对象实现了接口，默认情况下会采用 JDK 的动态代理，如果目标对象没有实现了接口,会使用 CGLIB 动态代理。</strong></p><p>🤐 多提一嘴：<code>createAopProxy()</code> 方法 决定了是使用 JDK 还是 Cglib 来做动态代理</p><p>如果一个类或者一个类中的 public 方法上被标注<code>@Transactional</code> 注解的话，Spring 容器就会在启动的时候为其创建一个代理类，在调用被<code>@Transactional</code> 注解的 public 方法的时候，实际调用的是，<code>TransactionInterceptor</code> 类中的 <code>invoke()</code>方法。这个方法的作用就是在目标方法之前开启事务，方法执行过程中如果遇到异常的时候回滚事务，方法调用完成之后提交事务。</p><blockquote><p><code>TransactionInterceptor</code> 类中的 <code>invoke()</code>方法内部实际调用的是 <code>TransactionAspectSupport</code> 类的 <code>invokeWithinTransaction()</code>方法。由于新版本的 Spring 对这部分重写很大，而且用到了很多响应式编程的知识</p></blockquote><p>Spring AOP 自调用问题</p><blockquote><ul><li><p>当一个方法被标记了<code>@Transactional</code> 注解的时候，Spring 事务管理器只会在被其他类方法调用的时候生效，而不会在一个类中方法调用生效。</p></li><li><p>这是因为 Spring AOP 工作原理决定的。因为 Spring AOP 使用动态代理来实现事务的管理，它会在运行的时候为带有 <code>@Transactional</code> 注解的方法生成代理对象，并在方法调用的前后应用事物逻辑。如果该方法被其他类调用我们的代理对象就会拦截方法调用并处理事务。但是在一个类中的其他方法内部调用的时候，我们代理对象就无法拦截到这个内部调用，因此事务也就失效了。</p></li><li><p>解决办法就是避免同一类中自调用或者使用 AspectJ 取代 Spring AOP 代理。</p></li></ul></blockquote><h2 id="Transactional-的使用注意事项总结"><a href="#Transactional-的使用注意事项总结" class="headerlink" title="@Transactional 的使用注意事项总结"></a><code>@Transactional</code> 的使用注意事项总结</h2><ul><li><code>@Transactional</code> 注解只有作用到 public 方法上事务才生效，不推荐在接口上使用；</li><li>避免同一个类中调用 <code>@Transactional</code> 注解的方法，这样会导致事务失效；</li><li>正确的设置 <code>@Transactional</code> 的 <code>rollbackFor</code> 和 <code>propagation</code> 属性，否则事务可能会回滚失败;</li><li>被 <code>@Transactional</code> 注解的方法所在的类必须被 Spring 管理，否则不生效；</li><li>底层使用的数据库必须支持事务机制，否则不生效；</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OJ系统数据库表设计和计划</title>
    <link href="/2023/09/14/OJ%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%92%8C%E8%AE%A1%E5%88%92/"/>
    <url>/2023/09/14/OJ%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%92%8C%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="oj项目数据库表设计"><a href="#oj项目数据库表设计" class="headerlink" title="oj项目数据库表设计"></a>oj项目数据库表设计</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">user</span><br>(<br>    id           <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    userAccount  <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    userPassword <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    unionId      <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;微信开放平台id&#x27;</span>,<br>    mpOpenId     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;公众号openId&#x27;</span>,<br>    userName     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>    userAvatar   <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户头像&#x27;</span>,<br>    userProfile  <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户简介&#x27;</span>,<br>    userRole     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;user&#x27;</span>            <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户角色：user/admin/ban&#x27;</span>,<br>    createTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete     tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>    index idx_unionId (unionId)<br>) comment <span class="hljs-string">&#x27;用户&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><br><span class="hljs-comment">-- 题目表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> question<br>(<br>    id          <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    title       <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                       <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标题&#x27;</span>,<br>    content     text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内容&#x27;</span>,<br>    tags        <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                      <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标签列表（json 数组）&#x27;</span>,<br>    answer      text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题目答案&#x27;</span>,<br>    submitNum   <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题目提交数&#x27;</span>,<br>    acceptedNum <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题目通过数&#x27;</span>,<br>    judgeCase   text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;判题用例（json 数组）&#x27;</span>,<br>    judgeConfig text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;判题配置（json 对象）&#x27;</span>,<br>    thumbNum    <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;点赞数&#x27;</span>,<br>    favourNum   <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;收藏数&#x27;</span>,<br> commentNum  <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;评论数&#x27;</span>,<br>  answerNum   <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题解数&#x27;</span>,<br>    userId      <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>    createTime  datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime  datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete    tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>    categoryId  <span class="hljs-type">int</span>                                comment <span class="hljs-string">&#x27;分类id&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;题目表&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br>    <br> <span class="hljs-comment">-- 题目评论表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> question_comment<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    questionId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题目 id&#x27;</span>,<br>  replyContent   text                           comment <span class="hljs-string">&#x27;评论内容&#x27;</span><br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;评论用户 id&#x27;</span>,<br>  thumbNum   <span class="hljs-type">int</span>                                         comment <span class="hljs-string">&#x27;评论点赞数&#x27;</span><br>  parentId   <span class="hljs-type">bigint</span>                                      comment <span class="hljs-string">&#x27;父评论id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    index idx_questionId (questionId),<br>    index idx_userId (userId)<br>) comment <span class="hljs-string">&#x27;题目评论表&#x27;</span>;<br><br><span class="hljs-comment">-- 题目点赞表（硬删除）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> question_thumb<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    questionId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题目 id&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    index idx_postId (questionId),<br>    index idx_userId (userId)<br>) comment <span class="hljs-string">&#x27;题目点赞表&#x27;</span>;<br><br><span class="hljs-comment">-- 题目题解表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> question_answer<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    questionId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题目 id&#x27;</span>,<br>    answerContent  text                           comment <span class="hljs-string">&#x27;题解内容&#x27;</span>,<br>  thumbNum    <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;点赞数&#x27;</span>,<br>  answer_tags    <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                   comment <span class="hljs-string">&#x27;分类标签（json列表）&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>  clickNum   <span class="hljs-type">int</span>                                comment <span class="hljs-string">&#x27;点击查看数&#x27;</span>,<br>  replyNum   <span class="hljs-type">int</span>                                comment <span class="hljs-string">&#x27;评论数&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>) comment <span class="hljs-string">&#x27;题目题解&#x27;</span>;<br><br><span class="hljs-comment">-- 题解点赞表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> answer_thumb<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    answerId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题解 id&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    index idx_questionId (questionId),<br>    index idx_userId (userId)<br>) comment <span class="hljs-string">&#x27;题解点赞表&#x27;</span>;<br><br><span class="hljs-comment">-- 题解评论表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> answer_comment<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    answerId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题解 id&#x27;</span>,<br>  replyContent   text                           comment <span class="hljs-string">&#x27;评论内容&#x27;</span><br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;评论用户 id&#x27;</span>,<br>  thumbNum   <span class="hljs-type">int</span>                                         comment <span class="hljs-string">&#x27;评论点赞数&#x27;</span><br>  parentId   <span class="hljs-type">bigint</span>                                      comment <span class="hljs-string">&#x27;父评论id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    index idx_answerId (answerId),<br>    index idx_userId (userId)<br>) comment <span class="hljs-string">&#x27;题解评论表&#x27;</span>;<br><br><span class="hljs-comment">-- 题解评论点赞表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> answer_reply_thumb<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    commentId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题解评论 id&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    index idx_commentId (commentId),<br>    index idx_userId (userId)<br>) comment <span class="hljs-string">&#x27;题解点赞表&#x27;</span>;<br><br><br><span class="hljs-comment">-- 题目收藏表（硬删除）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> post_favour<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    questionId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题目 id&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    index idx_questionId (questionId),<br>    index idx_userId (userId)<br>) comment <span class="hljs-string">&#x27;题目收藏&#x27;</span>;<br><br><span class="hljs-comment">-- 题目分类表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> question_categories<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>  categoryName <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) comment <span class="hljs-string">&#x27;分类名称&#x27;</span>,<br>  parentId   <span class="hljs-type">int</span>                                comment <span class="hljs-string">&#x27;父分类id&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    index idx_userId (userId)<br>) comment <span class="hljs-string">&#x27;题目分类表&#x27;</span>;<br><br><span class="hljs-comment">-- 题库表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> pay_questionBand<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>  questionBandImg          <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)        comment <span class="hljs-string">&#x27;题库封面图片&#x27;</span>,<br>  questionBandTitle        <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)        <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题库标题&#x27;</span>,    <br>    questionBandContents     text                      <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题库内容&#x27;</span>,<br>  payNum    <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;已购买数&#x27;</span>,<br>  answer_tags    <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                   comment <span class="hljs-string">&#x27;分类标签（json列表）&#x27;</span>,<br>  remainingNum  <span class="hljs-type">int</span>  <span class="hljs-keyword">default</span> <span class="hljs-number">10000</span>              <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-string">&#x27;剩余数量&#x27;</span>,<br>  unitPrice  <span class="hljs-type">float</span>   <span class="hljs-keyword">default</span> <span class="hljs-number">199.99</span>             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-string">&#x27;题库单价&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建用户 id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>) comment <span class="hljs-string">&#x27;题库表&#x27;</span>;<br><br><span class="hljs-comment">-- 订单表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> orders (<br>  orderId <span class="hljs-type">bigint</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT comment <span class="hljs-string">&#x27;id&#x27;</span>,<br>  userId <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>  orderNumber <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> comment <span class="hljs-string">&#x27;订单编号&#x27;</span>,<br>  orderDate DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> comment <span class="hljs-string">&#x27;下单日期&#x27;</span>,<br>  orderStatus <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> comment <span class="hljs-string">&#x27;订单状态&#x27;</span>,<br>  paymentMethod <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> comment <span class="hljs-string">&#x27;支付方式&#x27;</span>,<br>  questionBandId <span class="hljs-type">bigint</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;题库id&#x27;</span>,<br>  orderAmount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> comment <span class="hljs-string">&#x27;订单金额&#x27;</span>,<br>  cancelReason TEXT comment <span class="hljs-string">&#x27;订单取消原因&#x27;</span>,<br>  completeDate DATETIME comment <span class="hljs-string">&#x27;订单完成时间&#x27;</span>,<br>  createTime DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  updateTime DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span><br>) comment <span class="hljs-string">&#x27;订单表&#x27;</span>;<br></code></pre></td></tr></table></figure><p>待办事项</p><ul><li><input disabled="" type="checkbox"> 点赞和收藏的开发</li><li><input disabled="" type="checkbox"> 评论功能的开发</li><li><input disabled="" type="checkbox"> 题目分类的开发</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>项目计划</tag>
      
      <tag>数据库设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始建立博客</title>
    <link href="/2023/09/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/09/14/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="从零开始建立博客"><a href="#从零开始建立博客" class="headerlink" title="从零开始建立博客"></a>从零开始建立博客</h1><h2 id="一、假设你有github账号，你已经下载并配置好node-js下面我们将从此基础上搭建。"><a href="#一、假设你有github账号，你已经下载并配置好node-js下面我们将从此基础上搭建。" class="headerlink" title="一、假设你有github账号，你已经下载并配置好node.js下面我们将从此基础上搭建。"></a>一、假设你有github账号，你已经下载并配置好node.js下面我们将从此基础上搭建。</h2><ol><li><p>在任意目录下建立一个Blog目录用于初始化博客项目</p></li><li><p>进入新建的博客目录打开git窗口</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd D:/MyBlog<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br>hexo init //初始化<br>hexo g 静态部署<br>hexo s 查看页面<br></code></pre></td></tr></table></figure><ol start="3"><li>进入根目录下的_config.xml在最后面配置如下内容</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deploy:<br>  type: git<br>  repository: git@github.com:xiaozhouzai/xiaozhouzai.github.io.git  #你的仓库地址<br>  branch: main<br></code></pre></td></tr></table></figure><ol start="4"><li>安装git部署插件（执行hexo d 必须要安装这个插件）</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ol start="5"><li>每次更改内容需要执行以下三个命令：</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public<br>hexo g       #生成网站静态文件到默认设置的 public 文件夹<br>hexo d       #自动生成网站静态文件，并部署到设定的仓库<br></code></pre></td></tr></table></figure><ol start="6"><li>部署之后输入网址就可以看到你的博客内容</li></ol><p>报错：<code>warning: in the working copy of &#39;2023/07/28/hello-world/index.html&#39;, LF will be replaced by CRLF the next time Git touches it</code></p><p>解决：</p><p><code>git config --global core.autocrlf true</code></p><ol start="7"><li>下载主题（Fluid）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><ol start="8"><li><p>进入主题目录下的_config.xml进行主题配置，去官网看官方文档</p></li><li><p>新建文章：<code>hexo n 文件名</code></p></li><li><p>图片无法显示</p></li><li><p>解决：参考我的博客“typro配置图床”，采用图床图片就会显示。</p></li></ol><h2 id="二、报错及解决"><a href="#二、报错及解决" class="headerlink" title="二、报错及解决"></a>二、报错及解决</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (D:\MyBlog\node_modules\hexo-util\lib\spawn.js:<span class="hljs-number">51</span>:<span class="hljs-number">21</span>)<br>    at ChildProcess.emit (node:events:<span class="hljs-number">513</span>:<span class="hljs-number">28</span>)<br>    at cp.emit (D:\MyBlog\node_modules\cross-spawn\lib\enoent.js:<span class="hljs-number">34</span>:<span class="hljs-number">29</span>)<br>    at ChildProcess._handle.onexit (node:internal/child_process:<span class="hljs-number">291</span>:<span class="hljs-number">12</span>)<br>---------------------------------------------- <br>其他各种报错    <br><span class="hljs-comment">//搜的解决方法(对我没用)</span><br>rm -rf .deploy_git/<br>npm install hexo-deployer-git<br>hexo clean/ g /d<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection closed by <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> port <span class="hljs-number">22</span><br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-string">Error: Spawn failed</span><br><span class="hljs-string">    at ChildProcess.&lt;anonymous&gt; (D:\MyBlog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="hljs-string">    at ChildProcess.emit (node:events:513:28)</span><br><span class="hljs-string">    at cp.emit (D:\MyBlog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="hljs-string">    at ChildProcess._handle.onexit (node:internal/child_process:291:12)</span><br><span class="hljs-string">--------------------------------------------------------------------------------    </span><br></code></pre></td></tr></table></figure><p><strong>解决</strong>：原因，我开了加速器，DNS解析被污染：在host加入一条记录解析</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">140.82.113.4 github.com<br></code></pre></td></tr></table></figure><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230816115645732.png" alt="image-20230816115645732"></p><p>解决：相信我，在你配置主题发现部署之后网页迟迟展现不出来建议直接删除博客重新再搭建，以一个过来人的经历劝你，重新搭建比你修修改改弄好效率要高，切记如果你没有前端基础，不要随便修改配置。会崩溃!!!!!!</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一面</title>
    <link href="/2023/09/14/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%9D%A2/"/>
    <url>/2023/09/14/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="每日一面"><a href="#每日一面" class="headerlink" title="每日一面"></a>每日一面</h1><h2 id="RabbitMq的工作模式有啥？"><a href="#RabbitMq的工作模式有啥？" class="headerlink" title="RabbitMq的工作模式有啥？"></a><strong>RabbitMq</strong>的工作模式有啥？</h2><p>1，<strong>simple模式</strong>（普通模式）</p><p>消息生产者将消息发送到broker（各种消息中间件）直接发送到队列中，消费者监听队列是否有消息，有消息就去消费，消息被消费后消息队列就会把消息丢弃。一般把autoack设置为false，他表示开启自动确认，如果消息一旦被消费者取走，不管有没有被正确消费，都会确认，继而消息队列会将消息认为已处理，不接收到是否被正确消费就将消息移除队列，如果此时消息还没有被正确消费就没有了，会产生消息丢失问题。 </p><p>自定义basicAck（确认），或者basicNack（不确认），basicReject（拒绝） ，手动处理，处理完后及时发送ack，nack，reject消息给消息队列，如果一直不确认，消息会堆积在消息队列，会造成内存溢出情况</p><p>2, <strong>work</strong>模式（资源的竞争）</p><p>消息生产者将消息发送到消息队列，此时有多个消费者共同监听一个队列，当消费时，两个消费者共同去抢夺这个消息，谁抢到消息，谁消费。但是在分布式高并发情况下，有可能多个消费者同时抢到这个消息，多个消费者都消费了这条消息，可能会造成数据不一致等多个问题，比如任务是插入数据库操作，多个消费者都执行了，数据重复。</p><p>解决，给消费者设置synchronize开关，谁请到谁执行，其他的抢不到也不再消费。保证一条消息只能被一个消费者消费。</p><p>3，<strong>publish（发布）subscribe（订阅）</strong>模式</p><p>消息生产者将消息发到broker，由交换机将消息分发到绑定此交换机的所有队列。</p><p>每个消费者监听自己的队列</p><p>4，<strong>routing路由模式</strong></p><p>生产者将消息和路由密匙一起发到broker，由路由交换机根据路由匹配，根据路由匹配规则合理的设置routerKey，将消息发送到由路由匹配到的队列，消费者去消费对应的队列的消息</p><p>routerKey的设置很灵活，根据具体的业务场景自定义设计，主要还是两个通配符</p><p>*代表一个字符或一个字符串，#代表多个，或者全匹配</p><h2 id="synchronized-并发关键字的作用？"><a href="#synchronized-并发关键字的作用？" class="headerlink" title="synchronized 并发关键字的作用？"></a>synchronized 并发关键字的作用？</h2><p>synchronized是用来控制线程同步的，保证被synchronized修饰的代码块在同一时间只能被一个线程处理，synchronized可以修饰，类，方法，代码块。</p><p>jdk1.6之后synchronized🔒有四种状态:无锁，偏向锁，轻量级锁和重量级锁</p><p>🌵无锁: 当一个对象创建之后，还没有线程进入，这时候对象就处于无锁状态。 </p><p>🌵偏向所: 当处于无锁状态时，有一个线程A访问同步块并获得锁时会在对象头和栈帧中的锁记录线程ID(threadID)，之后该线程在进入和退出同步块时，不需要进行CAS操作来进行加锁解锁，只需要简单测试一下对象头的线程ID是否和当前线程是否一致 。</p><p>🌵轻量级锁: 在偏向锁的基础上，当有另一个线程B进来，这时判断对象头储存的线程ID和线程B的不一致，就会使用CAS竞争锁，并升级成轻量级锁，会在线程中创建一个锁记录，将锁信息复制到锁记录里，然后尝试使用CAS，将对象头的信息替换成指向👉🏻锁记录的指针。 </p><p>🌵重量级锁: 当线程没有获得轻量级锁的时候，线程会CAS自旋来获得锁，当一个线程自旋10次之后，仍没获得锁，择升级成重量级锁。成为重量级锁之后，线程会进入阻塞队列，线程不再自旋获得锁，而是由CPU进行调度，线程串行化执行。</p><ol><li>类级别的 synchronized：当 synchronized 修饰一个类时，它锁定的是整个类的实例。这意味着在同一时间内，只有一个线程可以访问该类的任何 synchronized 方法或代码块。这种方式可以用于保护共享的类级别资源。</li><li>方法级别的 synchronized：当 synchronized 修饰一个方法时，它锁定的是当前对象实例（即 this）。这意味着在同一时间内，只有一个线程可以访问该对象的该 synchronized 方法。其他线程需要等待当前线程执行完毕才能访问该方法。这种方式可以用于保护对象级别的资源。</li><li>块级别的 synchronized：当 synchronized 修饰一个代码块时，它锁定的是括号内指定的对象实例。这意味着在同一时间内，只有一个线程可以访问该对象的该 synchronized 代码块。其他线程需要等待当前线程执行完毕才能访问该代码块。这种方式可以用于保护特定的代码块级别资源。</li><li>对变量进行同步访问，可以使用其他的同步机制，如使用锁对象或使用原子类等。使用锁对象来同步访问变量的示例代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            count++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-keyword">return</span> count;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//对count的操作是线程安全的</span><br></code></pre></td></tr></table></figure><h2 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池?"></a>什么是线程池?</h2><p>线程池是一种管理和重用线程的技术，用于提高多线程应用的性能和效率</p><p>首先它存在线程容量，可以设定线程分配的数量</p><p>将预先创建的线程放入池中管理，并重用线程池中的线程对象</p><p>避免频繁的线程创建和销毁 </p><p>频繁创建和销毁线程，会增加虚拟机的回收频率，资源开销，造成性能下降</p><p>过多分配线程会造成内存溢出</p><h2 id="线程的阻塞是什么（我自己不懂的问题）"><a href="#线程的阻塞是什么（我自己不懂的问题）" class="headerlink" title="线程的阻塞是什么（我自己不懂的问题）"></a>线程的阻塞是什么（我自己不懂的问题）</h2><p>线程的阻塞指的是线程被暂时挂起或停止执行，直到满足某个条件后才能继续执行。当线程处于阻塞状态时，它会释放 CPU 资源，让其他可运行线程有机会执行。</p><p>线程可以因为多种原因而进入阻塞状态，包括但不限于以下几种情况：</p><ol><li>等待阻塞：当线程调用 <code>Object.wait()</code>、<code>Thread.join()</code> 或 <code>LockSupport.park()</code> 方法时，它会进入等待阻塞状态，直到其他线程调用相应的 <code>notify()</code>、<code>notifyAll()</code> 或 <code>unpark()</code> 方法来唤醒它。</li><li>同步阻塞：当线程尝试获取一个锁对象时，如果锁对象已被其他线程持有，则该线程会进入同步阻塞状态，直到锁对象被释放。</li><li>睡眠阻塞：当线程调用 <code>Thread.sleep()</code> 方法时，它会进入睡眠阻塞状态，暂停执行一段指定的时间。</li><li>I&#x2F;O 阻塞：当线程进行输入输出操作时，如果遇到阻塞的 I&#x2F;O 操作（如读取文件、网络通信等），线程会进入 I&#x2F;O 阻塞状态，直到 I&#x2F;O 操作完成。</li><li>条件阻塞：当线程调用 <code>Lock</code> 接口的 <code>Condition.await()</code> 方法时，它会进入条件阻塞状态，直到其他线程调用相应的 <code>Condition.signal()</code> 或 <code>Condition.signalAll()</code> 方法来唤醒它。</li></ol><p>线程的阻塞状态是临时的，一旦满足了相应的条件，线程就会被唤醒并继续执行。在阻塞期间，线程不会占用 CPU 资源，从而提高了系统的效率和资源利用率。</p><h2 id="springboot自动装配原理"><a href="#springboot自动装配原理" class="headerlink" title="springboot自动装配原理"></a>springboot自动装配原理</h2><p>通过@SpringbootApplication实现</p><p>@SpringbootApplication 是三个注解的集合</p><p>@EnableAutoConfiguration  </p><p>@ComponentScan</p><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><p><strong>HashMap（多线程是线程不安全的）</strong></p><p>​在多线程情况下，同时A、B两个线程走到createEntry()方法中，并且这两个线程中插入的元素hash值相同，bucketIndex值也相同，那么无论A线程先执行，还是B线程先被执行，最终都会2个元素先后向链表的头部插入，导致互相覆盖，致使其中1个线程中的数据丢失。这样就造成了HashMap的线程不安全，数据的不一致；更要命的是，HashMap在多线程情况下还会出现死循环的可能，造成CPU占用率升高，导致系统卡死。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//向链表头部插入元素：在数组的某一个角标下形成链表结构；</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createEntry</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">int</span> bucketIndex)</span> &#123;<br>    Entry&lt;K,V&gt; e = table[bucketIndex];<br>    table[bucketIndex] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(hash, key, value, e);<br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>HashTable效率低</strong></p><p>​在HashTable中，所有的方法都加上了synchronized锁，用锁来实现线程的安全性。由于***<font color="red">synchronized</font>*** 锁加在了HashTable的每一个方法上，所以这个锁就是HashTable本身–this。那么，可想而知HashTable的效率是如何，安全是保证了，但是效率却损失了。</p><p>无论执行哪个方法，整个哈希表都会被锁住，只有其中一个线程执行完毕，释放所，下一个线程才会执行。无论你是调用get方法，还是put方法皆是如此；</p><p><strong>ConcurrentHashMap取胜</strong></p><ul><li><p>由***<font color="red">Segment</font><em><strong>和</strong></em><font color="red">HashEntry</font>***两个数组组成。其中Segment起到了加锁同步的作用，而HashEntry则起到了存储K,V键值对的作用。</p></li><li><p>在ConcurrentHashMap中，每一个ConcurrentHashMap都包含了一个Segment数组，在Segment数组中每一个Segment对象则又包含了一个HashEntry数组，而在HashEntry数组中，每一个HashEntry对象保存K-V数据的同时又形成了链表结构，此时与HashMap结构相同。</p></li><li><p>在多线程中，每一个Segment对象守护了一个HashEntry数组，当对ConcurrentHashMap中的元素修改时，在获取到对应的Segment数组角标后，都会对此Segment对象加锁，之后再去操作后面的HashEntry元素，这样每一个Segment对象下，都形成了一个小小的HashMap，在保证数据安全性的同时，又提高了同步的效率。只要不是操作同一个Segment对象的话，就不会出现线程等待的问题！</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库设计</title>
    <link href="/2023/09/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/09/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ol><li>数据库设计应该根据实际需求进行，了解业务规则和数据关系。</li><li>考虑数据的完整性和一致性，使用合适的约束和验证机制。</li><li>考虑数据的可扩展性和性能，避免数据冗余和过度规范化。</li><li>选择适当的数据类型和索引，以提高查询效率。</li><li>考虑安全性和权限控制，限制对敏感数据的访问。</li></ol><h2 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h2><ol><li>单一职责原则（SRP）：每个表应该只包含与特定实体或概念相关的数据。</li><li>数据完整性原则：确保数据的正确性和一致性，使用主键、外键和约束等机制。</li><li>数据一致性原则：避免冗余和不一致的数据，通过规范化和合适的关系建立关联。</li><li>性能优化原则：考虑查询频率和复杂性，使用合适的索引和查询优化技术。</li></ol><p>　## 范式： </p><p>范式是一组规范化原则，用于设计数据库模式，以减少数据冗余和提高数据一致性。常见的范式有：</p><ol><li>第一范式（1NF）：确保每个表的每个列都是原子的，即不可再分。</li><li>第二范式（2NF）：在1NF的基础上，确保每个非主键列完全依赖于主键。</li><li>第三范式（3NF）：在2NF的基础上，确保每个非主键列之间没有传递依赖关系。</li></ol><h2 id="数据库事务："><a href="#数据库事务：" class="headerlink" title="数据库事务："></a>数据库事务：</h2><p>数据库事务是一组数据库操作的逻辑单元，要么全部执行成功，要么全部回滚。事务具有以下特性（ACID）：</p><ol><li>原子性（Atomicity）：事务中的所有操作要么全部成功，要么全部失败回滚。</li><li>一致性（Consistency）：事务开始和结束时，数据库的完整性约束应该保持一致。</li><li>隔离性（Isolation）：并发执行的事务应该相互隔离，互不干扰。</li><li>持久性（Durability）：事务一旦提交，其结果应该永久保存在数据库中。</li></ol><p><font color='red'>事务可以使用数据库的事务控制语句（如BEGIN、COMMIT和ROLLBACK）来管理。在数据库设计中，考虑到数据的完整性和一致性，事务的使用非常重要，特别是在需要同时修改多个表的情况下。通过使用事务，可以确保所有相关操作都能成功或回滚，避免数据不一致的问题。</font></p><p><strong>自关联表：</strong></p><p><strong>树形结构表</strong></p><p>比如分类表，一个分类下有多个子分类，使用自关联表设计</p><table><thead><tr><th>id</th><th>category_name</th><th>parent_id</th><th>is_delete</th></tr></thead><tbody><tr><td>1</td><td>商品</td><td></td><td>0</td></tr><tr><td>2</td><td>数码</td><td>1</td><td>0</td></tr><tr><td>3</td><td>手机</td><td>2</td><td>0</td></tr><tr><td>4</td><td>华为手机</td><td>3</td><td>0</td></tr><tr><td>5</td><td>华为note系列</td><td>4</td><td>0</td></tr><tr><td>6</td><td>华为note 9s</td><td>5</td><td>0</td></tr></tbody></table><p><strong>一对多用主子表：</strong></p><p>一般的id关联表</p><p><strong>多对多用关联关系表</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux（ubuntu）安装rabbitmq</title>
    <link href="/2023/09/14/Linux%EF%BC%88ubuntu%EF%BC%89%E5%AE%89%E8%A3%85rabbitmq/"/>
    <url>/2023/09/14/Linux%EF%BC%88ubuntu%EF%BC%89%E5%AE%89%E8%A3%85rabbitmq/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux（ubuntu）安装rabbitmq"><a href="#Linux（ubuntu）安装rabbitmq" class="headerlink" title="Linux（ubuntu）安装rabbitmq"></a>Linux（ubuntu）安装rabbitmq</h1><p>参考博客：<a href="https://blog.csdn.net/qq_45173404/article/details/116429302">RabbitMQ超详细安装教程（Linux）_rabbitmq安装_Baret-H的博客-CSDN博客</a></p><h2 id="下载依赖环境"><a href="#下载依赖环境" class="headerlink" title="下载依赖环境"></a>下载依赖环境</h2><p>依赖环境：Erlang（一门语言）</p><p>erlang下载：<a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a></p><p>rabbit下载：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p><p>兼容：</p><table><thead><tr><th>rabbitmq版本</th><th>Erlang版本</th></tr></thead><tbody><tr><td>3.12.4 3.12.3 3.12.2 3.12.1 3.12.0</td><td>最低25.0，最高26.0</td></tr></tbody></table><p>选择: </p><table><thead><tr><th>rabbitmq版本</th><th>Erlang版本</th></tr></thead><tbody><tr><td>3.12.2</td><td>25.3.2.5</td></tr></tbody></table><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>下载好使用xshell上传</p></blockquote><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230827160132935.png" alt="image-20230827160132935"></p><blockquote><p>安装erlang</p></blockquote><blockquote><p>执行解压命令 <code>rpm -Uvh erlang-25.0.4-1.el8.x86_64.rpm</code></p></blockquote><blockquote><p>安装命令： <code>apt install erlang</code></p></blockquote><blockquote><p>安装rabbitmq</p></blockquote><blockquote><p>安装插件：<code>apt install -y socat</code></p></blockquote><blockquote><p> 执行： <code>dpkg -i rabbitmq-server_3.12.3-1_all.deb</code> </p></blockquote><p><strong>如果这一步报错直接执行：</strong></p><ul><li><code>add-apt-repository ppa:rabbitmq/rabbitmq-erlang-25</code></li><li><code>apt --fix-broken install</code></li></ul><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">//报错<br>You might want <span class="hljs-keyword">to</span> run <span class="hljs-symbol">&#x27;apt</span> <span class="hljs-comment">--fix-broken install&#x27; to correct these.</span><br>The following packages have unmet dependencies:<br> rabbitmq-server : Depends: erlang-base (&gt;= <span class="hljs-number">1</span>:<span class="hljs-number">25.0</span>) but <span class="hljs-number">1</span>:<span class="hljs-number">22.2</span>.<span class="hljs-number">7</span>+dfsg-<span class="hljs-number">1</span>ubuntu0.<span class="hljs-number">2</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> be installed <span class="hljs-keyword">or</span> erlang-base-hipe (&gt;= <span class="hljs-number">1</span>:<span class="hljs-number">25.0</span>) but it <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> going <span class="hljs-keyword">to</span> be installed<br>dpkg: <span class="hljs-literal">error</span> processing <span class="hljs-keyword">package</span> rabbitmq-server (<span class="hljs-comment">--install):  </span><br></code></pre></td></tr></table></figure><ul><li>执行：<code>add-apt-repository ppa:rabbitmq/rabbitmq-erlang-25</code></li></ul><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">//报错<br>You might want <span class="hljs-keyword">to</span> run <span class="hljs-symbol">&#x27;apt</span> <span class="hljs-comment">--fix-broken install&#x27; to correct these.</span><br>The following packages have unmet dependencies:<br> rabbitmq-server : Depends: erlang-base (&gt;= <span class="hljs-number">1</span>:<span class="hljs-number">25.0</span>) but <span class="hljs-number">1</span>:<span class="hljs-number">22.2</span>.<span class="hljs-number">7</span>+dfsg-<span class="hljs-number">1</span>ubuntu0.<span class="hljs-number">2</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> be installed <span class="hljs-keyword">or</span> erlang-base-hipe (&gt;= <span class="hljs-number">1</span>:<span class="hljs-number">25.0</span>) but it <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> going <span class="hljs-keyword">to</span> be installed<br>dpkg: <span class="hljs-literal">error</span> processing <span class="hljs-keyword">package</span> rabbitmq-server (<span class="hljs-comment">--install):                          </span><br></code></pre></td></tr></table></figure><ul><li>解决： <code>apt --fix-broken install</code></li><li>末尾出现如下提示，即为安装完成</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Adding <span class="hljs-keyword">group</span> <span class="hljs-title">`rabbitmq</span>&#x27; (GID <span class="hljs-number">136</span>) ...<br>Done.<br>Adding system <span class="hljs-keyword">user</span> <span class="hljs-title">`rabbitmq</span>&#x27; (UID <span class="hljs-number">130</span>) ...<br>Adding new <span class="hljs-keyword">user</span> <span class="hljs-title">`rabbitmq</span>&#x27; (UID <span class="hljs-number">130</span>) with <span class="hljs-keyword">group</span> <span class="hljs-title">`rabbitmq</span>&#x27; ...<br>Not creating home directory `/var/lib/rabbitmq&#x27;.<br>Created symlink /etc/systemd/system/multi-user.target.wants/rabbitmq-server.service → /lib/systemd/system/rabbitmq-server.service.<br>//安装成功<br></code></pre></td></tr></table></figure><p>到此安装完成</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>按顺序执行下列操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">rabbitmq-server -detached  <span class="hljs-regexp">//</span>开机自启后台运行<br><br>systemctl restart rabbitmq-server<span class="hljs-regexp">//</span>启动rabbitmq<br><br>systemctl status rabbitmq-server <span class="hljs-regexp">//</span>查看状态<br><br>sudo rabbitmq-plugins enable rabbitmq_management <span class="hljs-regexp">//</span>添加web管理UI插件<br><br>systemctl restart rabbitmq-server <span class="hljs-regexp">//</span>重启<br><br>rabbitmqctl add_user lcy  <span class="hljs-number">158574</span> <br><span class="hljs-regexp">//</span>为远程访问分配一个账户 用户名:lcy,密码: <span class="hljs-number">158574</span>,官方默认guest,只能本机访问<br><br>rabbitmqctl set_user_tags lcy administrator <span class="hljs-regexp">//</span>为用户赋予权限<br>- administrator：可以登录控制台、查看所有信息、并对rabbitmq进行管理<br>- monToring：监控者；登录控制台，查看所有信息<br>- policymaker：策略制定者；登录控制台指定策略<br>- managment：普通管理员；登录控制<br><br><span class="hljs-regexp">//</span>为用户添加资源权限(授予访问虚拟机根节点的所有权限)<br>rabbitmqctl set_permissions -p / lcy <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span> <span class="hljs-string">&quot;.*&quot;</span><br></code></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>设置完成后访问：<a href="http://192.168.161.128:15672/">http://192.168.161.128:15672</a></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230827160802630.png" alt="image-20230827160802630"></p><h2 id="Java代码示例"><a href="#Java代码示例" class="headerlink" title="Java代码示例"></a>Java代码示例</h2><p>maven仓库：<a href="https://mvnrepository.com/artifact/com.rabbitmq/amqp-client/5.16.0">Maven Repository: com.rabbitmq » amqp-client » 5.16.0 (mvnrepository.com)</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.rabbitmq/amqp-client --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.16.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.DeliverCallback;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.161.128&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;lcy&quot;</span>); <br>    <span class="hljs-comment">//我这里是新加了一个用户管理，所以要设置用户名，密码</span><br>    <span class="hljs-comment">//默认的，本机的不用加。</span><br>        factory.setPassword(<span class="hljs-string">&quot;158574&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection(); <span class="hljs-comment">//创建连接 Connection</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">//声明队列</span><br>        channel.queueDeclare(*QUEUE_NAME*,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>        System.*out*.println(<span class="hljs-string">&quot;wait for message&quot;</span>);<br>        <span class="hljs-comment">//定义了如何处理消息</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), StandardCharsets.*UTF_8*);<br>           System.*out*.println(<span class="hljs-string">&quot;receive message:&quot;</span> + message);<br><br>       &#125;;<br>        <span class="hljs-comment">//消费消息，会持续阻塞</span><br><span class="hljs-comment">//        queue——自动应答队列的名称——如果服务器认为消息一旦发送就被确认，则为true;如果服务器期望显式确认，则为false。</span><br><span class="hljs-comment">//        deliverCallback -消息传递时的回调。</span><br><span class="hljs-comment">//        cancelCallback -取消消费者时的回调</span><br>        channel.basicConsume(*QUEUE_NAME*, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="生产者（producer）"><a href="#生产者（producer）" class="headerlink" title="生产者（producer）"></a><strong>生产者（producer）</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.DeliverCallback;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String *QUEUE_NAME* = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        factory.setHost(<span class="hljs-string">&quot;192.168.161.128&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;lcy&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;158574&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection(); <span class="hljs-comment">//创建连接 Connection</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">//声明队列</span><br>        channel.queueDeclare(*QUEUE_NAME*,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br>        System.*out*.println(<span class="hljs-string">&quot;wait for message&quot;</span>);<br>        <span class="hljs-comment">//定义了如何处理消息</span><br>        <span class="hljs-type">DeliverCallback</span> <span class="hljs-variable">deliverCallback</span> <span class="hljs-operator">=</span> (consumerTag, delivery) -&gt; &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(delivery.getBody(), StandardCharsets.*UTF_8*);<br>            System.*out*.println(<span class="hljs-string">&quot;receive message:&quot;</span> + message);<br><br>        &#125;;<br>        <span class="hljs-comment">//消费消息，会持续阻塞</span><br><span class="hljs-comment">//        queue——自动应答队列的名称——如果服务器认为消息一旦发送就被确认，则为true;如果服务器期望显式确认，则为false。</span><br><span class="hljs-comment">//        deliverCallback -消息传递时的回调。</span><br><span class="hljs-comment">//        cancelCallback -取消消费者时的回调</span><br>        channel.basicConsume(*QUEUE_NAME*, <span class="hljs-literal">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发布订阅:</strong></p><p><strong>消息确认机制</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ｊａｖａ">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);<br></code></pre></td></tr></table></figure><blockquote><p><code>channel.basicAck()</code> 方法用于确认消费者已经成功处理了一个或多个消息。它的第一个参数是 <code>deliveryTag</code>，表示要确认的消息的标识符。而第二个参数 <code>multiple</code> 是一个布尔值，用于指定是否同时确认多个消息。</p></blockquote><blockquote><p>当 <code>multiple</code> 参数为 <code>false</code> 时，只确认当前指定的 <code>deliveryTag</code> 所代表的消息。也就是说，只确认一条消息。</p></blockquote><blockquote><p>当 <code>multiple</code> 参数为 <code>true</code> 时，除了确认当前指定的 <code>deliveryTag</code> 所代表的消息，还会一并确认所有比当前 <code>deliveryTag</code> 小的未确认消息。也就是说，会确认多条消息。</p></blockquote><blockquote><p>通常情况下，我们会将 <code>multiple</code> 参数设置为 <code>false</code>，只确认当前处理的消息即可。这样可以确保消息按顺序被确认，避免出现消息处理顺序错乱的问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.basicNack(delivery.getEnvelope().getDeliveryTag(),<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><blockquote><p><code>channel.basicNack()</code> 方法用于否定确认消息的处理结果。它的第一个参数是 <code>deliveryTag</code>，表示要否定确认的消息的标识符。而第二个参数 <code>multiple</code> 是一个布尔值，用于指定是否同时否定确认多个消息。第三个参数 <code>requeue</code> 是一个布尔值，用于指定是否重新将消息放回队列。</p><p>当 <code>multiple</code> 参数为 <code>false</code> 时，只否定确认当前指定的 <code>deliveryTag</code> 所代表的消息。也就是说，只否定一条消息。</p><p>当 <code>multiple</code> 参数为 <code>true</code> 时，除了否定确认当前指定的 <code>deliveryTag</code> 所代表的消息，还会一并否定所有比当前 <code>deliveryTag</code> 小的未确认消息。也就是说，会否定多条消息。</p><p>当 <code>requeue</code> 参数为 <code>true</code> 时，被否定确认的消息会重新放回队列，等待重新被消费。当 <code>requeue</code> 参数为 <code>false</code> 时，被否定确认的消息会被丢弃，不会重新放回队列。</p><p>通常情况下，我们会将 <code>multiple</code> 参数设置为 <code>false</code>，只否定当前处理的消息即可。而 <code>requeue</code> 参数的取值根据具体的业务需求来决定，是否需要将消息重新放回队列等待重新消费。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.basicReject(delivery.getEnvelope().getDeliveryTag(),<span class="hljs-literal">false</span>,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>消息过期机制</strong>：给消息设置一个过期时间，map中设置参数的value值即可实现</p><p>**死信队列:**处理无法处理，被拒绝，宕机等原因造成的消息消费失败的消息</p>]]></content>
    
    
    
    <tags>
      
      <tag>安装教程</tag>
      
      <tag>DEMO</tag>
      
      <tag>mq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AIGC智能分析小助手</title>
    <link href="/2023/09/14/AIGC%E6%99%BA%E8%83%BD%E5%88%86%E6%9E%90%E5%B0%8F%E5%8A%A9%E6%89%8B/"/>
    <url>/2023/09/14/AIGC%E6%99%BA%E8%83%BD%E5%88%86%E6%9E%90%E5%B0%8F%E5%8A%A9%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="AIGC项目"><a href="#AIGC项目" class="headerlink" title="AIGC项目"></a>AIGC项目</h1><h2 id="数据库表设计："><a href="#数据库表设计：" class="headerlink" title="数据库表设计："></a>数据库表设计：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> aigc.user<br>(<br>    id            <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    userName      <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>    userAccount   <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    userPassword  <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    userAvatar    <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户头像&#x27;</span>,<br>    userSignature <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;座右铭&#x27;</span>,<br>    userPhone     <span class="hljs-type">varchar</span>(<span class="hljs-number">26</span>)                            <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;手机号&#x27;</span>,<br>    tags          <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标签 json 列表&#x27;</span>,<br>    userRole      <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;user&#x27;</span>            <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户角色：user/admin/ban&#x27;</span>,<br>    updateTime    datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete      tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>    createTime    datetime     <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;用户&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><br><span class="hljs-keyword">create</span> index idx_userAccount<br>    <span class="hljs-keyword">on</span> aigc.user (userAccount);<br><br><span class="hljs-comment">--</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> aigc.chart<br>(<br>    id         <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    goal       text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;分析目标&#x27;</span>,<br>    name       <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                       <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图表名称&#x27;</span>,<br>    chartData  text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图表数据&#x27;</span>,<br>    chartType  <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>)                       <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;图表类型&#x27;</span>,<br>    status     tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;0: wait 1: running 2: succeed 3: failed&#x27;</span>,<br>    optMessage text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;执行过程信息&#x27;</span>,<br>    genChart   text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;生成的图标信息&#x27;</span>,<br>    genResult  text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;生成的分析结论&#x27;</span>,<br>    userId     <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    createTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete   tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;图表信息表&#x27;</span> <span class="hljs-keyword">collate</span> <span class="hljs-operator">=</span> utf8mb4_unicode_ci;<br><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> aigc.user_blog<br>(<br>    id              <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;id&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    userId          <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    avatar          <span class="hljs-type">varchar</span>(<span class="hljs-number">516</span>)                       <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;文章图标标识&#x27;</span>,<br>    title           <span class="hljs-type">varchar</span>(<span class="hljs-number">126</span>)                       <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;标题&#x27;</span>,<br>    blogDescription <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                      <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;文章简述&#x27;</span>,<br>    content         text                               <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;内容&#x27;</span>,<br>    createTime      datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span>,<br>    updateTime      datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete        tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;0:未删除,1:删除&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;我的博客&#x27;</span>;<br><br><span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h2><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230914103633760.png" alt="image-20230914103633760"></p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>springboot</li><li>rabbitmq</li><li>redis</li><li>redission(限流)</li><li>线程池</li><li>ant design pro</li><li>echarts</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>1.安装官方文档初始化</p><p>2.运行</p><p>3.提交代码</p><p>移除多余的配置</p><p>移除国际化报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">fatal: detected dubious ownership in repository at &#x27;D:/Front/AIGC_frontend&#x27;<br>&#x27;D:/Front/AIGC_frontend&#x27; is owned by:<br>        &#x27;S-1-5-32-544&#x27;<br>but the current user is:<br>        &#x27;S-1-5-21-2792808732-2295366469-2416382537-1001&#x27;<br>To add an exception for this directory, call:<br>git config --global --add safe.directory D:/Front/AIGC_frontend<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --add safe.directory D:/Front/AIGC_frontend<br><br>解决启动报错<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Error: .eslintrc.js » /front-end/ant-app-v6/node_modules/@umijs/lint/dist/config/eslint/index.js:<br>Environment key &quot;es2022&quot; is unknown<br></code></pre></td></tr></table></figure><p>解决：</p><ol><li><p><code>yarn add eslint-config-prettier</code></p></li><li><p><code>yarn add eslint-plugin-unicorn</code></p></li><li><pre><code class="java">//找到以下目录的文件node_modules/@umijs/lint/dist/config/eslint/index.js注释掉 // es2022: true<figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br>   <br><br>后端初始化<br><br>**Swagger启动报错**<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">解决 :高版本<span class="hljs-title class_">SpringBoot</span>整合<span class="hljs-title class_">Swagger</span> 启动报错<span class="hljs-title class_">Failed</span> to start bean <span class="hljs-string">&#x27;documentationPluginsBootstrapper&#x27;</span> 问题</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">一、控制台报错信息</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">二、两种解决办法</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1</span>、配置<span class="hljs-title class_">WebMvcConfigurer</span>.<span class="hljs-property">java</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2</span>、配置文件添加spring.<span class="hljs-property">mvc</span>.<span class="hljs-property">pathmatch</span>.<span class="hljs-property">matching</span>-strategy=ant_path_matcher</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">三、项目启动</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">四、swagger访问，<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8080/doc.html</span></span><br><br>**解决端口号被占用问题**<br><br>cmd窗口运行: `netsh interface ipv4 show excludedportrange protocol=tcp`<br><br>记得把在路由添加个人中心页面，自己写个人中心页面<br><br><br><br>**调用ai生成option代码无法被前端json,prese转化报错**<br><br>`Expected property name or &#x27;&#125;&#x27; in JSON at position 6`<br><br>`SyntaxError: Expected property name or ‘&#125;‘ in JsoN atposition 1`<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">解决：参考：[<span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-property">parse</span>: bad parsing - <span class="hljs-title class_">JavaScript</span> | <span class="hljs-variable constant_">MDN</span> (mozilla.<span class="hljs-property">org</span>)](<span class="hljs-attr">https</span>:<span class="hljs-comment">//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse)</span></span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">问题发现：字段被<span class="hljs-string">&#x27; &#x27;</span>单引号括住，无法被解析成<span class="hljs-title class_">Json</span>，需要<span class="hljs-string">&quot; &quot;</span>双引号才行;</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">我的解决: 让<span class="hljs-title class_">Ai</span>预设加入限制输出格式，每个字段的属性值用<span class="hljs-string">&quot;&quot;</span>双引号标注</span><br><br><br><br>//优化点<br><br>实现文件上传，秒传，文件一定要校验，后缀名，大小，文件上传大小超过100MB考虑分片<br><br>校验文件的合规性（麻烦），使用阿里腾讯的现成方法<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">数据存储：设计初期，把用户的上传的excel解析成string存在数据库的一个字段中</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">问题：</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 后期用户过多，内存消耗过大，影响查询效率</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 如果前端要求查看用户上传数据 查询困难</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">解决(**分库分表思想**)：</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- 新建数据库表，将要展示要查询的原始数据单独建一个表，将原始数据的列名设置为新表的字段名，看情况可以存在mangod</span><br><span class="hljs-meta prompt_">&gt;</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- 把每个图表对应的原始数据字段chartData单独保存一个新的数据表，而不是都存在chartData字段中。</span><br><br><br><br>实现：<br><br>- 在存储chartData字段时，改为，写程序拼接建表语句，然后再向建的新表中插入对应数据<br>- 新表字段对应原始数据的表头<br><br>```sql<br>create table chartData_charId（chart表的id）(<br>id  bigint primary key <br>&#x27;日期&#x27; DataTime not null,<br>#这里看情况，考虑一下，如过long类型过长，前端会出现接受long类型数据精度丢失问题比如：后端：1216464984684654654 =&gt; 前端：1216464984684654000<br>&#x27;用户数&#x27; varchar(128) not null,<br><br>)<br></code></pre></td></tr></table></figure></code></pre></li></ol><ul><li>查询语句：由查询一个字段到查询一个表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> chartData_charId;<br></code></pre></td></tr></table></figure><ul><li>mybatis最灵活的动态sql</li></ul><p><strong>风险:</strong> sql注入,做一个sql校验</p><p>查询时万一用户输入<code>select * from table where id=1</code> 正常输入<code>1</code></p><p>用户如果输入<code>1,or 1=1</code>  ,<code>select * from table where id=1 ,or 1=1</code></p><p>就会获取全部的数据,有些不能展示的数据被泄露</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>= <span class="hljs-string">&#x27;查询方法名&#x27;</span>, <span class="hljs-attr">paramsType</span>=<span class="hljs-string">&#x27;参数类型&#x27;</span>, <span class="hljs-attr">resultType</span>=<span class="hljs-string">&#x27;返回结果类型&#x27;</span>&gt;</span><br>$&#123;sql语句&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>拼接bug</li></ul><blockquote><p>用String[] 拼接是乱序的，拼接sql字段顺序会报错</p><p>后来发现不是这个问题：</p><p>问题所在，从数据库获取字段名没有指定按照建表顺序进行</p><p>加上 <code>ORDER BY ORDINAL_POSITION</code>,按照特定顺序排序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> COLUMN_NAME <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS <span class="hljs-keyword">WHERE</span> TABLE_NAME <span class="hljs-operator">=</span> #&#123;tableName&#125; <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ORDINAL_POSITION<br></code></pre></td></tr></table></figure><blockquote><p>优点:分开存储互不影响，增加安全性</p></blockquote><p>学习正则表达</p><p><strong>限流</strong></p><p>收费，消耗资源的功能一定要做限流</p><p>控制成本 -&gt;限制用户调用次数</p><p>用户在短时间内疯狂调用，导致服务器资源占满 –&gt;做限流</p><p>限流：用户在一秒内疯狂调用 &#x3D;&#x3D;&#x3D;》限制用户一秒只能调用一次（看个人）</p><p>用户在一分钟内调用60次，判断用户是恶意调用，加入黑名单</p><p>1）本地限流，单机限流，</p><p>每个服务器都设置一个限流</p><p><strong>线程池</strong></p><p><strong>Ai调用异步代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这是静态的图表，如果你想拓展，你可以再让ai生成函数function,返回类型再加一个字段,把生成的函数代码再设置到function中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> genChartByAiRequest</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/gen&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;AiResponse&gt; <span class="hljs-title function_">genChartByAi</span><span class="hljs-params">(<span class="hljs-meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file,</span><br><span class="hljs-params">                                             GenChartByAiRequest genChartByAiRequest, HttpServletRequest request)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> genChartByAiRequest.getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">goal</span> <span class="hljs-operator">=</span> genChartByAiRequest.getGoal();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">chartType</span> <span class="hljs-operator">=</span> genChartByAiRequest.getChartType();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> ExcelUtils.excelToCsv(file);<br>        <span class="hljs-comment">//校验</span><br>        ThrowUtils.throwIf(StringUtils.isBlank(name) &amp;&amp; name.length() &gt; <span class="hljs-number">100</span>, ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;图标名为空&quot;</span>);<br>        ThrowUtils.throwIf(StringUtils.isBlank(goal) &amp;&amp; goal.length() &gt; <span class="hljs-number">1024</span>, ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;分析目标为空&quot;</span>);<br>        ThrowUtils.throwIf(StringUtils.isBlank(chartType), ErrorCode.NOT_FOUND_ERROR, <span class="hljs-string">&quot;图表类型为空&quot;</span>);<br>        <span class="hljs-comment">//校验文件</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> file.getSize();<br>        <span class="hljs-comment">//定义一个预设最大限度10兆,</span><br>        ThrowUtils.throwIf(size &gt; FILE_MAX_SIZE,ErrorCode.PARAMS_ERROR,<span class="hljs-string">&quot;文件过大，上传失败&quot;</span>);<br>        <span class="hljs-comment">//校验文件名后缀</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> FileUtil.getSuffix(originalFilename);<br>        <span class="hljs-keyword">if</span> (suffix == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;后缀名解析错误&quot;</span>);<br>        &#125;<br>        ThrowUtils.throwIf(!suffix.equals(EXCEL_SUFFIX),ErrorCode.NOT_FOUND_ERROR,<span class="hljs-string">&quot;后缀名不匹配,上传失败&quot;</span>);<br><br>        <span class="hljs-comment">//Ai预设</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">prompt</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;假如你是一个资深数据分析师和前端开发专家，接下来我会按照以下固定格式给你提供内容: \n&quot;</span> +<br>                <span class="hljs-string">&quot;分析需求: \n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;数据分析的需求或者目标&#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;需要分析的数据: \n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;csv格式的原始数据，用,作为分隔符&#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;请根据这两部分内容，按照以下指定的格式生成内容(此外不要输出任何多余的注释，开头，结尾，符号等) \n&quot;</span> +<br>                <span class="hljs-string">&quot;【【【【【【\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;前端Echarts V5版本的 option 配置对象的js代码的Json格式，强调一下，一定要Json格式的代码，便于前端解析成Json解析器解析，合理的将数据进行可视化，这里只需要option 配置对象的js代码，不要生成任何多余的内容，比如注释&#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;【【【【【【\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;明确的数据分析结论，越详细越好，不要生成多余的注释&#125;&quot;</span>;<br>        <span class="hljs-comment">//用户输入填充</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">userInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        userInput.append(prompt).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        userInput.append(<span class="hljs-string">&quot;以下是我的提问内容，请你按照上面的输入和输出的格式，提取我下面的内容，并按上述格式生成代码和结论。&quot;</span>).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        userInput.append(<span class="hljs-string">&quot;我的分析需求:&quot;</span>).append(<span class="hljs-string">&quot;\n&quot;</span>).append(goal).append(<span class="hljs-string">&quot;。我需要生成的图表类型为:&quot;</span>).append(chartType).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        userInput.append(<span class="hljs-string">&quot;原始csv数据:&quot;</span>).append(<span class="hljs-string">&quot;\n&quot;</span>).append(data);<br>        <span class="hljs-comment">//执行任务之前，先把用户输入保存至数据库</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> userService.getLoginUser(request);<br>        <span class="hljs-comment">//先向数据库插入除了ChartData除外的数据</span><br>        <span class="hljs-type">Chart</span> <span class="hljs-variable">chart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chart</span>();<br>        chart.setGoal(goal);<br>        chart.setName(name);<br>        chart.setChartData(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//设置为等待状态</span><br>        chart.setStatus(ChartEnum.WAIT.getKey());<br>        chart.setChartType(chartType);<br>        chart.setUserId(loginUser.getId());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> chartService.save(chart);<br>        <span class="hljs-keyword">if</span> (!save)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-number">12131</span>,<span class="hljs-string">&quot;保存图表数据失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//获取已保存的chartId</span><br>        <span class="hljs-comment">//根据name查询id</span><br>        LambdaQueryWrapper&lt;Chart&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(Chart::getName,name);<br>        <span class="hljs-type">Chart</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> chartService.getOne(queryWrapper);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> one.getId();<br>        <span class="hljs-comment">//保存数据库</span><br>        String[] split1 = data.split(<span class="hljs-string">&quot;\n&quot;</span>);<br>        String[] split2 = split1[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;,&quot;</span>);<br>        List&lt;String&gt; list = Arrays.asList(split2);<br>        <span class="hljs-comment">//获取长度，循环写拼接sql</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> list.size();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table chartData_&quot;</span> +id+<br>                <span class="hljs-string">&quot;(id  bigint auto_increment  primary key,&quot;</span>;<br>        stringBuilder.append(sql1);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; length; k++) &#123;<br>            <span class="hljs-keyword">if</span> (k == length - <span class="hljs-number">1</span>)&#123;<br>                stringBuilder.append(list.get(k)).append(<span class="hljs-string">&quot; varchar(128) null&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                stringBuilder.append(list.get(k)).append(<span class="hljs-string">&quot; varchar(128) null,&quot;</span>);<br>            &#125;<br>        &#125;<br>        stringBuilder.append(<span class="hljs-string">&quot;)&quot;</span>);<br>        <span class="hljs-comment">//拼接完成</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> stringBuilder.toString();<br>        <span class="hljs-comment">//执行建表语句</span><br>        chartService.createChartDataTable(sql);<br>        <span class="hljs-comment">//获取新建表的字段</span><br>        List&lt;String&gt; tableColumns = chartService.getTableColumns(<span class="hljs-string">&quot;chartData_&quot;</span> + id);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        builder.append(<span class="hljs-string">&quot;insert into chartData_&quot;</span>).append(id).append(<span class="hljs-string">&quot; (&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt; tableColumns.size(); k++) &#123;<br>            <span class="hljs-keyword">if</span> ( k == tableColumns.size()-<span class="hljs-number">1</span>)&#123;<br>                builder.append(tableColumns.get(k));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                builder.append(tableColumns.get(k)).append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>        &#125;<br>        builder.append(<span class="hljs-string">&quot;) values (&quot;</span>);<br>        <span class="hljs-comment">//把builder转化为String不可变对象,不然下面的每次拼接都会在上次的基础上拼接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">insertBuilder</span> <span class="hljs-operator">=</span> builder.toString();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        String[] split3 = data.split(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i1 &lt; split3.length; i1++) &#123;<br>            String[] split4 = split3[i1].split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i2 &lt; split4.length; i2++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> split4[i2];<br>                <span class="hljs-keyword">if</span> (i2 == split4.length -<span class="hljs-number">1</span>)&#123;<br>                    stringBuilder1.append(<span class="hljs-string">&quot;&#x27;&quot;</span>).append(s).append(<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    stringBuilder1.append(<span class="hljs-string">&quot;&#x27;&quot;</span>).append(s).append(<span class="hljs-string">&quot;&#x27;,&quot;</span>);<br>                &#125;<br>            &#125;<br>            stringBuilder1.append(<span class="hljs-string">&quot;)&quot;</span>);<br>            <span class="hljs-comment">//执行插入的拼接sql</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sqlGood</span> <span class="hljs-operator">=</span> insertBuilder + stringBuilder1;<br>            chartService.insertChartTable(sqlGood);<br>            <span class="hljs-comment">//把使用过的stringBuilder1清空，便于下次循环的执行</span><br>            stringBuilder1.delete(<span class="hljs-number">0</span>,stringBuilder1.length());<br>            <span class="hljs-comment">//TODO BUG 插入不进去  已解决</span><br>        &#125;<br>        <span class="hljs-comment">//TODO 处理任务队列满了之后的抛异常</span><br>        <span class="hljs-comment">//新增任务,将调用Ai任务塞进去</span><br>        CompletableFuture.runAsync(() -&gt; &#123;<br>            <span class="hljs-comment">//todo 添加超时时间。超过时间标记任务为失败，手动结束任务</span><br>            <span class="hljs-comment">//todo 添加超时时间字段,or 给线程池添加一个任务超时参数？</span><br>            <span class="hljs-comment">//修改ai生成图表的状态为执行中running</span><br>            one.setStatus(ChartEnum.RUNNING.getKey());<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> chartService.updateById(one);<br><br>            <span class="hljs-comment">//判断是否更新成功</span><br>            <span class="hljs-keyword">if</span> (!b)&#123;<br>                handleException(one,<span class="hljs-string">&quot;更新图表执行状态失败&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//使用Ai传输问题</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">chatResult</span> <span class="hljs-operator">=</span> aiManager.doChat(userInput.toString());<br>            <span class="hljs-comment">//限流判断  针对每个用户做限流，每个用户单位时间内只能执行这个方法2次</span><br>            <span class="hljs-comment">//给每一个用户色设定一个限流器，根据key的不同来区分</span><br>            <span class="hljs-comment">//划分粒度，针对每个方法被xx调用做限流，针对某个用户操作某个方法做限流</span><br>            <span class="hljs-comment">// String key = 方法名+userID</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;genChartByAi_&quot;</span> + loginUser.getId();<br>            <span class="hljs-comment">//限流</span><br>            limiterManager.doRedisLimiter(key);<br><br>            <span class="hljs-comment">//获取结果</span><br>            String[] split = chatResult.split(<span class="hljs-string">&quot;【【【【【【&quot;</span>);<br>            ThrowUtils.throwIf(split.length&lt;<span class="hljs-number">3</span>,ErrorCode.SYSTEM_ERROR,<span class="hljs-string">&quot;Ai响应错误&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">1</span>].trim();  <span class="hljs-comment">//trim()去除了首尾空格的新字符串</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> option.indexOf(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">optionJs</span> <span class="hljs-operator">=</span> option.substring(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">genResult</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">2</span>].trim();<br>            <span class="hljs-comment">//打印输出</span><br>            log.info(optionJs);<br>            log.info(genResult);<br>            <span class="hljs-comment">//更改数据库图标状态为 成功 succeed , 失败 failed</span><br>            one.setStatus(ChartEnum.SUCCEED.getKey());<br>            one.setGenChart(optionJs);<br>            one.setGenResult(genResult);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">updateResult</span> <span class="hljs-operator">=</span> chartService.updateById(one);<br>            <span class="hljs-keyword">if</span> (!updateResult)&#123;<br>                handleException(one,<span class="hljs-string">&quot;更新图表成功状态失败&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>        &#125;,poolExecutor);<br><br>        <span class="hljs-comment">//向表中插入数据</span><br>        <span class="hljs-comment">//返回</span><br>        <span class="hljs-type">AiResponse</span> <span class="hljs-variable">aiResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AiResponse</span>();<br>        <span class="hljs-keyword">return</span> ResultUtils.success(aiResponse);<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">handleException</span><span class="hljs-params">(Chart one,String errorMessage)</span>&#123;<br>        one.setStatus(ChartEnum.FAILED.getKey());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> chartService.updateById(one);<br>        <span class="hljs-keyword">if</span> (!b) &#123;<br>            log.error(<span class="hljs-string">&quot;更新图表失败状态失败,&quot;</span>+one.getId()+ <span class="hljs-string">&quot;,&quot;</span>+ errorMessage);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>分表实现：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230831084605165.png" alt="image-20230831084605165"></p><ul><li>反向压力：根据下游调用服务的状态来反推你的核心线程数的设置，</li></ul><p><font color='red'>可以设置定时任务定时检查下游服务的服务状态，比如Ai很繁忙，这时候就不要增加核心线程数，如果AI很空闲，适当增加核心线程数，动态的调整核心线程数，建议不要在配置中写死;</font></p><p>优化: </p><ul><li><p>guava retrying重试机制,任务执行失败时自动重试</p></li><li><p>添加任务超时时间 </p></li><li><p>前端我的图表加上定时刷新</p></li><li><p>任务执行成功或失败给用户发送实时消息</p></li></ul><h2 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq:"></a>rabbitmq:</h2><h3 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h3><h3 id="消息重试"><a href="#消息重试" class="headerlink" title="消息重试"></a>消息重试</h3><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><p><font color='red'>处理失败了的消息，从死信队列中去消息去重试或消费，任务完成不了交给死信队列，新建一个队列比如外包队列，外包队列获取死信队列的失败消息（专门处理死信的队列，只是一个普通的队列）</font></p><p><font color='red'>  死信队列的主要目的是处理以下情况：</font></p><ol><li>消息被拒绝（basic.reject）并且不重新入队（requeue&#x3D;false）。</li><li>消息过期（消息的 TTL 设置）。</li><li>队列达到最大长度。</li></ol><p>使用死信队列的<strong>步骤</strong>如下：</p><ol><li><p>创建一个普通的队列，并设置其 <code>x-dead-letter-exchange</code> 和 <code>x-dead-letter-routing-key</code> 参数，用于指定死信消息的交换器和路由键。</p></li><li><p>创建一个死信交换器，并将其绑定到死信队列上。</p></li><li><p>将消息发送到普通队列中，当消息满足死信条件时，RabbitMQ 会将其发送到死信交换器，并路由到死信队列中.</p></li></ol><h3 id="消息过期机制"><a href="#消息过期机制" class="headerlink" title="消息过期机制"></a>消息过期机制</h3><h2 id="Apache-kafka"><a href="#Apache-kafka" class="headerlink" title="Apache kafka"></a>Apache kafka</h2><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p>集成websocket</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-websocket --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>TODO </p><p>后端集成websocket，配置websocket，编写websocketService，</p><p>自定义接收发送消息的方法，</p><p>在任务完成时调用发送消息方法，前端接收到消息后，设置变量当接收到消息时变量值+1，</p><p>后端设计一个消息数据库，接受的消息存入数据库，点击图标时展示消息列表。</p><p>搭建聊天室，</p><p>发送实时消息</p><p><a href="https://blog.csdn.net/qq_27610647/article/details/132422945">Spring Boot 集成 WebSocket 实现服务端推送消息到客户端_不羁的fang少年的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/poker_zero/article/details/126184697">java后端+前端使用WebSocket实现消息推送_前端调用java的websocket客户端_零⁮的博客-CSDN博客</a></p><h2 id="线程池知识点"><a href="#线程池知识点" class="headerlink" title="线程池知识点"></a>线程池知识点</h2><p><a href="https://blog.csdn.net/weixin_45433817/article/details/132524464?spm=1001.2014.3001.5501&ydreferer=aHR0cHM6Ly9hcnRpY2xlcy56c3hxLmNvbS8=&ydreferer=aHR0cHM6Ly9hcnRpY2xlcy56c3hxLmNvbS8=">Java并发编程第6讲——线程池（万字详解）_橡 皮 人的博客-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mq</tag>
      
      <tag>项目</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux配置Elasticsearch环境（基础学习版）</title>
    <link href="/2023/09/14/linux%E9%85%8D%E7%BD%AEElasticsearch%E7%8E%AF%E5%A2%83%EF%BC%88%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%89%88%EF%BC%89/"/>
    <url>/2023/09/14/linux%E9%85%8D%E7%BD%AEElasticsearch%E7%8E%AF%E5%A2%83%EF%BC%88%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="linux配置Elasticsearch环境（基础学习版）"><a href="#linux配置Elasticsearch环境（基础学习版）" class="headerlink" title="linux配置Elasticsearch环境（基础学习版）"></a>linux配置Elasticsearch环境（基础学习版）</h1><h2 id="jdk配置"><a href="#jdk配置" class="headerlink" title="jdk配置"></a>jdk配置</h2><ol><li>编辑环境</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><ol start="2"><li><pre><code class="shell">export JAVA_HOME=/opt/resource/jdk1.8export PATH=$PATH:$JAVA_HOME/bin:wq 保存并关闭文件。<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-number">3</span>. 使配置的环境变量生效：<br><br>```bash<br><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure></code></pre></li><li><p>验证Java的安装：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure><h2 id="Elasticsearch裸奔配置"><a href="#Elasticsearch裸奔配置" class="headerlink" title="Elasticsearch裸奔配置"></a>Elasticsearch裸奔配置</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改elasticsearch配置<br>执行命令:<br><code>vim /opt/resource/elasticsearch-7.17.9/config/elasticsearch.yml</code></p><p>修改数据和日志目录<br>这里可以不用修改，如果不修改，默认放在elasticsearch根目录下</p><p>数据目录位置</p><p><code>path.data: /home/新用户名称/elasticsearch/data </code></p><p>日志目录位置</p><p><code>path.logs: /home/新用户名称/elasticsearch/logs </code><br>修改绑定的ip允许远程访问</p><p>#默认只允许本机访问,绑定到0.0.0.0，允许任何ip来访问</p><p><code>network.host: 0.0.0.0 </code><br>初始化节点名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cluster.name: elasticsearch <br>node.name: es-node0<br>cluster.initial_master_nodes: [&quot;es-node0&quot;]<br></code></pre></td></tr></table></figure><p>修改端口号（非必须）</p><p>http.port: 9200</p><p>修改如下：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230814135428086.png" alt="image-20230814135428086"></p><p>修改<code>vim /opt/resource/elasticsearch-7.17.9/config/kibana.yml</code></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230814135342260.png" alt="image-20230814135342260"></p><p>将jdk修改为es中自带jdk的配置目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/local/elasticsearch-7.13.2/jdk<br>export PATH=$JAVA_HOME/bin:$PATH<br><br>if [ -x &quot;$JAVA_HOME/bin/java&quot; ]; then<br>        JAVA=&quot;/usr/local/elasticsearch-7.13.2/jdk/bin/java&quot;<br>else<br>        JAVA=`which java`<br>fi<br></code></pre></td></tr></table></figure><p>修改后执行<code>source /etc/profile</code>使配置生效</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>切换到<code>user-es</code>用户su user-es</p><p><code>cd /opt/resource/elasticsearch-7.17.9/bin</code></p><p><code>./elasticsearch</code></p><p><code>./elasticsearch &amp; </code> 后台运行命令</p><p>关闭命令： <code>CTRL+C</code></p><p><a href="http://192.168.161.128:9200/">http://192.168.161.128:9200</a></p><p>切换到<code>user-es</code>用户<code>su user-es</code></p><p><code>cd /opt/resource/kibana-7.17.9-linux-x86_64/bin</code></p><p><code>./kibana</code></p><p>kibana中文配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">编辑kibana.yml</span><br><span class="hljs-string">vim</span> <span class="hljs-string">/opt/resource/kibana-7.17.9-linux-x86_64/config/kibana.yml</span><br><span class="hljs-string">加入一行配置：</span><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><span class="hljs-comment">#或者取消注释: #i18n.locale: &quot;en&quot;   --&gt; &quot;zh-CN&quot;</span><br></code></pre></td></tr></table></figure><p><code>./kibana &amp; </code>后台运行命令</p><p>关闭命令：<code> CTRL+C</code></p><p><a href="http://192.168.161.128:5601/">http://192.168.161.128:5601</a></p><h3 id="Bug解决"><a href="#Bug解决" class="headerlink" title="Bug解决"></a>Bug解决</h3><h4 id="Bug1"><a href="#Bug1" class="headerlink" title="Bug1"></a>Bug1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR: [2] bootstrap checks failed. You must address the points described in the following [2] lines before starting Elasticsearch.<br>bootstrap check failure [1] of [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br></code></pre></td></tr></table></figure><blockquote><p>elasticsearch用户拥有的内存权限太小，至少需要262144，解决办法：<br>在 &#x2F;etc&#x2F;sysctl.conf 文件最后添加如下内容，即可永久修改</p><p>切换到root用户<br>执行命令：<code>su root</code></p><p>执行命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysctl.conf<br></code></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">vm.max_map_count</span>=<span class="hljs-number">262144</span><br></code></pre></td></tr></table></figure><p>保存退出，刷新配置文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sysctl -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>切换user-es用户，继续启动</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">su <span class="hljs-keyword">user</span>-es<br></code></pre></td></tr></table></figure><p>启动es服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>resource<span class="hljs-regexp">/elasticsearch-7.17.9/</span>bin/elasticsearch<br></code></pre></td></tr></table></figure></blockquote><h4 id="Bug2"><a href="#Bug2" class="headerlink" title="Bug2"></a>Bug2</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">bootstrap<span class="hljs-built_in"> check </span>failure [2] of [2]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured<br></code></pre></td></tr></table></figure><blockquote><p>这个错误是由于在生产环境中使用默认的发现设置而引起的。为了解决这个问题，您需要配置至少一个发现设置项（<code>discovery.seed_hosts</code>、<code>discovery.seed_providers</code> 或 <code>cluster.initial_master_nodes</code>）。</p><p><strong>集群环境解决：</strong></p><p>在 Elasticsearch 的配置文件（<code>elasticsearch.yml</code>）中，找到以下行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># cluster.initial_master_nodes: [&quot;node-1&quot;,&quot;node-2&quot;]</span><br></code></pre></td></tr></table></figure><p>取消注释 <code>cluster.initial_master_nodes</code> 行，并将其设置为至少一个 Elasticsearch 节点的名称或 IP 地址。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>,<span class="hljs-string">&quot;node-2&quot;</span>]<br></code></pre></td></tr></table></figure><p>如果您使用的是 Elasticsearch 7.0 及更高版本，推荐使用 <code>discovery.seed_hosts</code> 设置项。找到以下行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># discovery.seed_hosts: []</span><br></code></pre></td></tr></table></figure><p>取消注释 <code>discovery.seed_hosts</code> 行，并将其设置为至少一个 Elasticsearch 节点的主机名或 IP 地址。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">discovery.seed_hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.161</span><span class="hljs-number">.128</span><br></code></pre></td></tr></table></figure><p><strong>单机解决方法：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-string">//可以忽略</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">es-node0</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;es-node0&quot;</span>]<br></code></pre></td></tr></table></figure></blockquote><p><code>chmod 777  要读写的文件或目录名</code></p><h4 id="Bug3"><a href="#Bug3" class="headerlink" title="Bug3"></a>Bug3</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">启动kibana报错：<br>FATAL  Error: Unable to <span class="hljs-keyword">write</span> to UUID <span class="hljs-keyword">file</span> at <span class="hljs-regexp">/opt/</span>resource<span class="hljs-regexp">/kibana-7.17.9-linux-x86_64/</span>data<span class="hljs-regexp">/uuid. Ensure Kibana has sufficient permissions to read /</span> <span class="hljs-keyword">write</span> to <span class="hljs-keyword">this</span> <span class="hljs-keyword">file</span>.  Error was: EACCES<br></code></pre></td></tr></table></figure><p><strong>解决：修改文件的读写权限：</strong></p><p>切换<code>root</code>用户，赋予文件读写权限：<code>chmod 777 /opt/resource/kibana-7.17.9-linux-x86_64/config/kibana.yml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">启动ES报错:<br>ERROR: [1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch. bootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] ERROR: Elasticsearch did not exit normally - check the logs at /opt/resource/elasticsearch-7.17.9/logs/elasticsearch.log<br></code></pre></td></tr></table></figure><blockquote><p>这个错误是由于Elasticsearch的启动检查失败导致的。错误消息中提到了一个具体的问题：<code>max virtual memory areas vm.max_map_count</code> 的值太低。</p><p><code>vm.max_map_count</code> 是一个内核参数，它限制了一个进程可以拥有的虚拟内存区域的数量。<code>Elasticsearch</code>在启动时需要更多的虚拟内存区域来正常运行。</p><p>要解决这个问题，您需要增加 <code>vm.max_map_count</code> 的值。这可以通过以下步骤完成：</p><ol><li><p>使用管理员权限登录到您的系统。</p></li><li><p>打开终端并执行以下命令来临时增加</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vm</span>.max_map_count<br></code></pre></td></tr></table></figure><p>的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sysctl -w vm.max_map_count=262144<br></code></pre></td></tr></table></figure><p>这将临时增加</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vm</span>.max_map_count<br></code></pre></td></tr></table></figure><p>的值为 262144。请注意，这种更改只在当前会话中有效，系统重启后会恢复为默认值。</p></li><li><p>尝试重新启动 <code>Elasticsearch</code>，看是否仍然出现相同的错误。如果问题仍然存在，请继续以下步骤。</p></li><li><p>永久增加 <code>vm.max_map_count</code>的值，以便在系统重启后仍然生效。</p></li><li><p>打开 <code>/etc/sysctl.conf</code>文件进行编辑：<code>sudo nano /etc/sysctl.conf</code></p></li><li><p>在文件的末尾添加以下行：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">vm.max_map_count</span>=<span class="hljs-number">262144</span><br></code></pre></td></tr></table></figure></li><li><p>保存并关闭文件。然后执行以下命令使更改生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo sysctl -p<br></code></pre></td></tr></table></figure></li><li><p>尝试重新启动<code> Elasticsearch</code>，应该不再出现相同的错误。</p></li></ol></blockquote><h4 id="Bug4"><a href="#Bug4" class="headerlink" title="Bug4"></a>Bug4</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">报错：<br><span class="hljs-selector-attr">[es-node0]</span> error updating geoip database <span class="hljs-selector-attr">[GeoLite2-Country.mmdb]</span><br><span class="hljs-selector-attr">[2023-08-14T13:20:16,526]</span><span class="hljs-selector-attr">[ERROR]</span><span class="hljs-selector-attr">[o.e.i.g.GeoIpDownloader  ]</span> <span class="hljs-selector-attr">[es-node0]</span> error updating geoip database <span class="hljs-selector-attr">[GeoLite2-City.mmdb]</span><br>java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.SocketException</span>: Connection reset<br><br></code></pre></td></tr></table></figure><h4 id="Bug5"><a href="#Bug5" class="headerlink" title="Bug5"></a>Bug5</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">报错：<br>at TCPConnectWrap<span class="hljs-selector-class">.afterConnect</span> <span class="hljs-selector-attr">[as oncomplete]</span> (node:net:<span class="hljs-number">1278</span>:<span class="hljs-number">16</span>) &#123;<br>  errno: -<span class="hljs-number">111</span>,<br>  <span class="hljs-selector-tag">code</span>: <span class="hljs-string">&#x27;ECONNREFUSED&#x27;</span>,<br>  syscall: <span class="hljs-string">&#x27;connect&#x27;</span>,<br>  <span class="hljs-selector-tag">address</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>  port: <span class="hljs-number">9200</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Bug6"><a href="#Bug6" class="headerlink" title="Bug6"></a>Bug6</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//kibana可视化页面提示，server.publicBaseUrl 缺失，在生产环境中运行时应配置。某些功能可能运行不正常</span><br></code></pre></td></tr></table></figure><p>解决：</p><blockquote><p>当您在 Kibana 中看到 <code>server.publicBaseUrl</code> 缺失的警告时，这意味着您需要配置 <code>server.publicBaseUrl</code> 设置。这个设置用于指定 Kibana 的公共基本 URL，以便在生成的链接中使用。</p><p>要解决这个问题，您可以按照以下步骤进行操作：</p><ol><li>打开 Kibana 的配置文件 <code>kibana.yml</code>。</li><li>在文件中找到 <code>server.publicBaseUrl</code> 设置（如果不存在，请添加它）。</li><li>将 <code>server.publicBaseUrl</code> 设置为您的 Kibana 的公共基本 URL。例如，如果您的 Kibana 是通过 <code>http://example.com/kibana</code> 访问的，那么您的设置将如下所示：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server.publicBaseUrl:</span> <span class="hljs-string">&quot;http://example.com/kibana&quot;</span><br></code></pre></td></tr></table></figure><ol><li>保存配置文件并重新启动 Kibana。</li></ol><p>重新启动后，警告应该不再显示，并且 Kibana 的某些功能（如生成的链接）应该能够正常工作。</p><p>请注意，<code>server.publicBaseUrl</code> 设置的值应该是您实际使用的公共基本 URL，确保它与您的部署环境相匹配。</p><p>如果你只是本地学习，那么将你的server.publicBaseUrl配置为本地id即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server.publicBaseUrl:</span> <span class="hljs-string">&quot;http://192.168.161.128:5601&quot;</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="Bug7"><a href="#Bug7" class="headerlink" title="Bug7"></a>Bug7</h4><p>ik插件版本号与elasticsearch版本号不一致报错</p><blockquote><p>解决方案：修改   &#x2F;opt&#x2F;resource&#x2F;elasticsearch-7.17.9&#x2F;plugins&#x2F;ik&#x2F;plugin-descriptor.properties文件内容，将版本号改为一致</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230814195234385.png" alt="image-20230814195234385"></p></blockquote><h2 id="Elasticsearch开启密码"><a href="#Elasticsearch开启密码" class="headerlink" title="Elasticsearch开启密码"></a>Elasticsearch开启密码</h2><h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><ol><li>修改es的配置文件：&#x2F;opt&#x2F;resource&#x2F;elasticsearch-7.17.9&#x2F;config&#x2F;elasticsearch.yml，添加如下配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">xpack.security.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">xpack.license.self_generated.type:</span> <span class="hljs-string">basic</span><br><span class="hljs-attr">xpack.security.transport.ssl.enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="2"><li>移动到<code>/opt/resource/elasticsearch-7.17.9/bin</code>目录下执行命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./elasticsearch-setup-passwords interactive<br></code></pre></td></tr></table></figure><ol start="3"><li>设置六个账号的密码：elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#密码自己随意设置就好</span><br><span class="hljs-attr">elastic:</span> <span class="hljs-number">158574</span><br><span class="hljs-attr">apm_system:</span> <span class="hljs-number">112830</span><br><span class="hljs-attr">kibana_system:</span> <span class="hljs-number">158574</span><br><span class="hljs-attr">logstash_system:</span> <span class="hljs-number">112830</span><br><span class="hljs-attr">beats_system:</span> <span class="hljs-number">112830</span><br><span class="hljs-attr">remote_monitoring_user:</span> <span class="hljs-number">158574</span><br></code></pre></td></tr></table></figure><ol start="4"><li>修改<a href="https://so.csdn.net/so/search?q=kibana&spm=1001.2101.3001.7020">kibana</a>的配置<code>kibana.yml</code>：</li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">elasticsearch.username:</span> <span class="hljs-string">&quot;elastic&quot;</span><br><span class="hljs-symbol">elasticsearch.password:</span> <span class="hljs-string">&quot;158574&quot;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>elasticsearch修改密码的命令如下：</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">curl -H <span class="hljs-string">&quot;Content-Type:application/json&quot;</span> -XPOST -u elastic &#x27;http://192.168.161.128:<span class="hljs-number">9200</span>/_xpack/security/user/elastic/_password&#x27; -d &#x27;&#123; &quot;password&quot; : &quot;<span class="hljs-number">123456</span>&quot; &#125;&#x27;<br></code></pre></td></tr></table></figure><ol start="6"><li>重启es和kibana访问<a href="http://192.168.161.128:9200，需要输入账号密码才可以访问。">http://192.168.161.128:9200，需要输入账号密码才可以访问。</a></li></ol><h2 id="Elasticsearch配置ik分词器（中文友好）"><a href="#Elasticsearch配置ik分词器（中文友好）" class="headerlink" title="Elasticsearch配置ik分词器（中文友好）"></a>Elasticsearch配置ik分词器（中文友好）</h2><p><strong>一定下载与Elasticsearch的版本一致或相近的版本</strong></p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases?q=7.17.7&expanded=true">github下载地址</a></p><p>ik分词器插件下载后上传至&#x2F;opt&#x2F;resource&#x2F;elasticsearch-7.17.9&#x2F;plugins&#x2F;目录下</p><p>新建目录 mkdir ik </p><p>进入ik目录，上传下载好的ik分词器</p><p>解压  unzip + 分词器包名</p><p>解压后重启elasticsearch即可</p><p>测试分词器：分词器种类有：ik_max_word（将文本做最细粒度的拆分），ik_smart（最粗粒度的拆分）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span>     <span class="hljs-string">&quot;你好我是李成阳，你是真爱粉吗，我是ikun。&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>2、扩展词典使用<br>         扩展词就是不想让那些词被分开，让他们组成一个此，比如长春桥</p><pre><code class="hljs">1、自定义扩展词库 进入到config/analysis-ik（插件安装方式）或/usr/elasticsearch/plugins/analysis-ik/config/目录下新增自定义词典  vi cc_ext_dict.dic 输入：长春桥       2、自定义的扩展词典文件添加到IKAnalyzer.cfg.xml配置中 vi IKAnalyzer.cfg.xml               3、重启es/usr/elasticsearch/bin/elasticsearch</code></pre><p>3、停用词典使用<br>    停用词就是在文本中出现频率很高，但是对语义产生不了多大的影响，比如中文的“的、哦、了、呢”等，这些词称为停用词。一般经常会被过滤掉不会进行索引</p><pre><code class="hljs">1、自定义停用词库进入到config/analysis-ik（插件安装方式）或/usr/elasticsearch/plugins/analysis-ik/config/目录下新增自定义词典vi cc_stop_dict.dic 输入 的、哦、了、呢</code></pre><p>​        </p><pre><code class="hljs">2、添加到IKAnalyzer.cfg.xml配置中3、重启es/usr/elasticsearch/bin/elasticsearch</code></pre><p> 4、同义词典使用：<br>        意思相同的词，在搜索时应该同时查出来，比如“馒头”和“馍”，这种情况叫做同义词查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs json">注意：扩展词和停用词时在索引的时候使用，同义词是检索的时候<br><br><span class="hljs-number">1</span>、创建synonym.txt<br>vi synonym.txt 输入同义词<br><br><span class="hljs-number">2</span>、重启es<br>/usr/elasticsearch/bin/elasticsearch<br><br><span class="hljs-number">3</span>、使用是指定synonym.text<br>前缀路径为：/usr/elasticsearch/config/ <br><br>analysis<span class="hljs-punctuation">:</span>为自己创建的目录<br><br>PUT /cc003<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;word_sync&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;synonym&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;synonyms_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;analysis/synonym.txt&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;ik_sync_max_word&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;word_sync&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;custom&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ik_sync_smart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;word_sync&quot;</span><br>          <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;custom&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_sync_max_word&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_sync_max_word&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-number">4</span>、添加内容<br>POST /cc003/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;馒头你们哪里叫什么&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-number">5</span>、查询<br>POST /cc003/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;馍&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="Elasticsearch语法"><a href="#Elasticsearch语法" class="headerlink" title="Elasticsearch语法"></a>Elasticsearch语法</h2><p>kibana  DevTools(本质:restful请求)</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0/query-dsl-match-all-query.html">中文文档</a></p><p><a href="https://blog.csdn.net/qq_38011415/article/details/111862429">7x版本DSL语法大全</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.0">DSL语法官网文档</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yang-Api</title>
    <link href="/2023/09/14/Yang-Api/"/>
    <url>/2023/09/14/Yang-Api/</url>
    
    <content type="html"><![CDATA[<h1 id="yangapi-backend"><a href="#yangapi-backend" class="headerlink" title="yangapi_backend"></a>yangapi_backend</h1><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs sql">use api_backend;<br><br><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <span class="hljs-keyword">user</span><br>(<br>    id           <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    userName     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户昵称&#x27;</span>,<br>    userAccount  <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;账号&#x27;</span>,<br>    userAvatar   <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                          <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户头像&#x27;</span>,<br>    gender       tinyint                                <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;性别&#x27;</span>,<br>    userRole     <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;user&#x27;</span>            <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户角色：user / admin&#x27;</span>,<br>    userPassword <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                           <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    createTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime   datetime     <span class="hljs-keyword">default</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete     tinyint      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span>,<br>    <span class="hljs-keyword">constraint</span> uni_userAccount<br>        <span class="hljs-keyword">unique</span> (userAccount)<br>) comment <span class="hljs-string">&#x27;用户&#x27;</span>;<br><br><span class="hljs-comment">-- 接口信息表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>  `interface_info`<br>(<br>    `id` <span class="hljs-type">bigint</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span> <span class="hljs-keyword">primary</span> key,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    `description` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;描述&#x27;</span>,<br>    `url` <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;接口地址&#x27;</span>,<br>    `requestHeader` text <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;请求头&#x27;</span>,<br>    `responseHeader` text <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;响应头&#x27;</span>,<br>    `userId` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建人&#x27;</span>,<br>    `status` <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;接口状态（0 - 关闭， 1 - 开启））&#x27;</span>,<br>    `<span class="hljs-keyword">method</span>` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;请求类型&#x27;</span>,<br>    `createTime` datetime <span class="hljs-keyword">default</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    `updateTime` datetime <span class="hljs-keyword">default</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    `isDelete` tinyint <span class="hljs-keyword">default</span> <span class="hljs-number">0</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除(0-未删, 1-已删)&#x27;</span><br>) comment <span class="hljs-string">&#x27;接口信息表&#x27;</span>;<br><br><span class="hljs-comment">-- 接口用户关联表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> api_backend.user_interface_info<br>(<br>    id              <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;主键&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    userId          <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;调用用户 id&#x27;</span>,<br>    interfaceInfoId <span class="hljs-type">bigint</span>                             <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;接口 id&#x27;</span>,<br>    totalNum        <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;总调用次数&#x27;</span>,<br>    leftNum         <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;剩余调用次数&#x27;</span>,<br>    status          <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;0-正常，1-禁用&#x27;</span>,<br>    createTime      datetime <span class="hljs-keyword">default</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime      datetime <span class="hljs-keyword">default</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-operator">*</span><span class="hljs-built_in">CURRENT_TIMESTAMP</span><span class="hljs-operator">*</span> comment <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>    isDelete        tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除(0-未删, 1-已删)&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;用户调用接口关系&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230914091950696.png" alt="image-20230914091950696"></p><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计:"></a>模块设计:</h2><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230914091605034.png" alt="image-20230914091605034"></p><h2 id="系统架构："><a href="#系统架构：" class="headerlink" title="系统架构："></a>系统架构：</h2><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230914095725115.png" alt="image-20230914095725115"></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>阳api开放平台</p><p>前端流程：</p><ol><li><p>获取openapi，json文档，使用openapi插件自动生成前端代码.</p></li><li><p>修改requesterrorConfig.ts为requestConfig.ts,修改里面的内容如下：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230804190344529.png" alt="image-20230804190344529"></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230804190605667.png" alt="image-20230804190605667"></p></li><li><p>修改登录页面，找到USER的Login目录的Index.tsx找到里面的login方法</p></li><li><p>app.tsx中的getInitState获取全局信息</p></li><li><p>在typings.d.ts中的最下面添加如下接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局状态类型</span><br><span class="hljs-comment"> * 存全局变量的地方</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InitialState</span> &#123;<br>  <span class="hljs-attr">loginUser</span>: <span class="hljs-variable constant_">API</span>.<span class="hljs-property">UserVO</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改app.tsx的如下位置</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230804194122778.png" alt="image-20230804194122778"></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230804195142417.png" alt="image-20230804195142417"></p></li><li><p>根据提示删除没有用到的导入</p></li><li><p>进入User Login index目录下继续修改如下：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230804232907284.png" alt="image-20230804232907284">删除掉没用的代码</p></li><li><p>回到requestConfig修改如下代码：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230804233437537.png" alt="image-20230804233437537"></p></li><li><p>解决用户权限问题，进入access.ts文件修改如下</p></li></ol><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230804233634344.png" alt="image-20230804233634344"></p><ol start="11"><li><p>进入TableList的index.tsx找到tablelist方法，点击columns换成自己想展示的列表列名</p></li><li><p>找到request，更改展示列表数据的方法</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230805004753476.png" alt="image-20230805004753476"></p></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts">request=&#123;<span class="hljs-keyword">async</span> (params, <span class="hljs-attr">sort</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-title class_">SortOrder</span>&gt;, <span class="hljs-attr">filter</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, (<span class="hljs-built_in">string</span> | <span class="hljs-title class_">React</span>.<span class="hljs-property">ReactText</span>)[] | <span class="hljs-literal">null</span>&gt;) =&gt; &#123;<br>          <span class="hljs-keyword">const</span> res =<span class="hljs-keyword">await</span> <span class="hljs-title function_">listInterfaceInfoByPageUsingGET</span>(&#123;<br>            ...params<br>          &#125;)<br>          <span class="hljs-keyword">if</span> (res?.<span class="hljs-property">data</span>) &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>              <span class="hljs-attr">data</span>: res?.<span class="hljs-property">data</span>.<span class="hljs-property">records</span> || [],<br>              <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>              <span class="hljs-attr">total</span>: res.<span class="hljs-property">total</span>,<br>            &#125;<br>        &#125;<br>        &#125;&#125;<br></code></pre></td></tr></table></figure><ol start="13"><li><p>修改TableList目录为interfaceInfo，修改里面的内容：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230805092834963.png" alt="image-20230805092834963"></p></li></ol><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><ol><li><p>前端修改信息有一个问题，修改信息时，没有传递id列，导致修改后id列传给后端的id为null，后端因为id不能为空所以系统报错。</p><p>解决方法应该修改前端，让前端修改时带上id。</p></li><li><p>修改用户主页页脚随数据的减少而改动</p></li></ol><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li>新建用户中心页面，比如签名可能泄露，用户申请更换accessKey</li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>后端步骤:</p><ol><li>API签名认证</li><li>客户端SDK开发（stater）</li></ol><h2 id="api签名认证"><a href="#api签名认证" class="headerlink" title="api签名认证"></a>api签名认证</h2><p>本质：</p><ol><li>签发签名</li><li>使用签名（效验签名）</li></ol><p>需要的原因：</p><ol><li>保证安全性，不能随意一个人调用</li></ol><p>密码一定不要在服务器传输</p><p>加密方法：md5（不可解密）</p><h2 id="starter创建流程"><a href="#starter创建流程" class="headerlink" title="starter创建流程"></a>starter创建流程</h2><ul><li>建立一个Maven空项目</li><li>删除掉不必要的目录</li><li>引入必要的依赖(如果创建时pom文件中存在&lt; build &gt;一定要删除)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.yangapi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>yangapi-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>com-yangapi-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>com.yangapi-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;yangapi.client&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ComponentScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YangApiClientConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> String accessKey;<br>    <span class="hljs-keyword">private</span> String secretKey;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> YangApiClient <span class="hljs-title function_">yangApiClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YangApiClient</span>(accessKey,secretKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>创建客户端（用于接收ak，sk校验，并且调用模拟接口）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YangApiClient</span> &#123;<br>    <span class="hljs-comment">//调用方</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String accessKey;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String secretKey;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">YangApiClient</span><span class="hljs-params">(String accessKey, String secretKey)</span> &#123;<br>        <span class="hljs-built_in">this</span>.accessKey = accessKey;<br>        <span class="hljs-built_in">this</span>.secretKey = secretKey;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRandomAvatar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">avatarUrl</span> <span class="hljs-operator">=</span> HttpUtil.get(<span class="hljs-string">&quot;http://localhost:8100/api/yangapi/random-avatar&quot;</span>);<br>        <span class="hljs-keyword">return</span> avatarUrl;<br>    &#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密sk(隐藏sk)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> body</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; <span class="hljs-title function_">setHeader</span><span class="hljs-params">(String body)</span>&#123;<br>        Map&lt;String,String&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;accessKey&quot;</span>,accessKey);<br>        <span class="hljs-comment">//随机数</span><br>        hashMap.put(<span class="hljs-string">&quot;body&quot;</span>,body);<br>        <span class="hljs-comment">//时间戳</span><br>        hashMap.put(<span class="hljs-string">&quot;nonce&quot;</span>, RandomUtil.randomNumbers(<span class="hljs-number">5</span>));<br>        <span class="hljs-comment">//签名</span><br>        hashMap.put(<span class="hljs-string">&quot;timestamp&quot;</span>, String.valueOf(System.currentTimeMillis() / <span class="hljs-number">1000</span>));<br>        hashMap.put(<span class="hljs-string">&quot;sign&quot;</span>, SignUtils.getSign(body,secretKey));<br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNewsRankingList</span><span class="hljs-params">( Total total)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(total);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> HttpRequest.post(<span class="hljs-string">&quot;http://localhost:8100/api/yangapi/top-news&quot;</span>)<br>                .addHeaders(setHeader(json))<br>                .body(json)<br>                .execute().body();<br>        <span class="hljs-keyword">return</span> body;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在resources目录下创建META-INF目录</li><li>在META-INF目录下创建spring.factories</li><li>在spring.factories中加入如下配置代码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">#spring boot stater<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.yangapi.sdk.YangApiClientConfig<br></code></pre></td></tr></table></figure><ul><li>在pom文件中命名starter为API-SDK(随意命名)</li><li>使用maven命令install或者package打包项目</li><li>可以发送到maven官方仓库，自用的话先找到该jar包，然后·直接在其他项目引入即可。</li></ul><h2 id="gateway中使用装饰器模式"><a href="#gateway中使用装饰器模式" class="headerlink" title="gateway中使用装饰器模式"></a>gateway中使用装饰器模式</h2><p>利用reponse装饰者，增强response，使他可以输出相应日志和相关的业务操作比如调用接口次数—+1</p><p>解决方案：利用 response 装饰者，增强原有 response 的处理能力</p><p>参考博客：<a href="https://blog.csdn.net/qq_19636353/article/details/126759522">https://blog.csdn.net/qq_19636353/article/details/126759522</a></p><p>其他参考：</p><p><a href="https://blog.csdn.net/zx156955/article/details/121670681">https://blog.csdn.net/zx156955/article/details/121670681</a></p><p><a href="https://blog.csdn.net/weixin_43933728/article/details/121359727?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_43933728/article/details/121359727?spm=1001.2014.3001.5501</a></p><p><a href="https://blog.csdn.net/qq_39529562/article/details/108911983">https://blog.csdn.net/qq_39529562/article/details/108911983</a></p><h2 id="api网关-gateway"><a href="#api网关-gateway" class="headerlink" title="api网关(gateway)"></a>api网关(gateway)</h2><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-combined-global-filter-and-gatewayfilter-ordering">编写全局过滤器编写统一业务代码</a></p><ul><li><p>增删改查</p></li><li><p>统计调用次数，接口调用次数+1</p></li></ul><p>核心概念：</p><ul><li><p>条件，简称断言</p></li><li><p>路由：（<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">根据什么条件，转发到指定路由</a>）</p></li><li><p>路由匹配：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">predicates:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/red/&#123;segment&#125;,/blue/&#123;segment&#125;</span><br></code></pre></td></tr></table></figure><ol><li><p><code>/red/&#123;segment&#125;</code>：这个规则匹配以<code>/red/</code>开头的路径，并且<code>&#123;segment&#125;</code>是一个占位符，表示路径中的一个变量。例如，<code>/red/apple</code>和<code>/red/orange</code>都会匹配到这个规则。</p></li><li><p><code>/blue/&#123;segment&#125;</code>：这个规则匹配以<code>/blue/</code>开头的路径，并且<code>&#123;segment&#125;</code>是一个占位符，表示路径中的一个变量。例如，<code>/blue/apple</code>和<code>/blue/orange</code>都会匹配到这个规则。</p></li><li><pre><code class="java">Map&lt;String, String&gt; uriVariables = ServerWebExchangeUtils.getUriTemplateVariables(exchange);String segment = uriVariables.get(&quot;segment&quot;);//这段代码是用于从ServerWebExchange对象中获取URI模板变量的值。//首先，ServerWebExchange是Spring WebFlux中的一个核心对象，它代表一个HTTP请求和响应的交换。getUriTemplateVariables()是ServerWebExchangeUtils工具类中的一个静态方法，用于从ServerWebExchange对象中提取URI模板变量的值。//在给定的代码中，uriVariables是一个Map&lt;String, String&gt;类型的变量，用于存储URI模板变量的名称和对应的值。通过调用ServerWebExchangeUtils.getUriTemplateVariables(exchange)，可以从ServerWebExchange对象中提取URI模板变量，并将其存储在uriVariables中。//接下来，通过调用uriVariables.get(&quot;segment&quot;)，可以获取名为&quot;segment&quot;的URI模板变量的值，并将其赋值给segment变量。这样，我们就可以在后续的代码中使用segment变量来处理这个URI模板变量的值。  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>- 过滤器（ 添加请求头标识）<br><br>  <br><br>------<br><br>### 令牌桶，漏桶，计数器算法<br><br>#### **概述：**<br><br>（1）计数器：<br><br>在一段时间间隔内（时间窗/时间区间），处理请求的最大数量固定，超过部分不做处理。<br><br>（2）漏桶：<br><br>漏桶大小固定，处理速度固定，但请求进入速度不固定（在突发情况请求过多时，会丢弃过多的请求）。<br><br>（3）令牌桶：<br><br>令牌桶的大小固定，令牌的产生速度固定，但是消耗令牌（即请求）速度不固定（可以应对一些某些时间请求过多的情况）；每个请求都会从令牌桶中取出令牌，如果没有令牌则丢弃该次请求。<br><br>[三种算法详细讲解](https://blog.csdn.net/crazymakercircle/article/details/130035504?ydreferer=aHR0cHM6Ly9jbi5iaW5nLmNvbS8%3D)<br><br><br><br><br><br>### 降级可运行默认配置<br><br>#### 非反应式配置<br><br>**前提：**<br><br>- `org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j`- 非反应性应用<br>- `org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j`- 反应式应用<br><br>*引入非反应式：*<br><br>```xml<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--断路器过滤器依赖,降级--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-circuitbreaker-reactor-resilience4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li></ol></li></ul><p><strong>yml配置：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8100</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">org.springframework.cloud.gateway:</span> <span class="hljs-string">trace</span>   <span class="hljs-comment">#日志级别 trace为最低</span><br>    <span class="hljs-attr">reactor.netty.http.client:</span> <span class="hljs-string">debug</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">default-filters:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=lcy,yangapi</span>   <span class="hljs-comment">#默认过滤器，添加请求头,所有定义的路由都会添加这个请求头</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">path_route</span><br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8090</span>  <span class="hljs-comment">#重定向的路由地址,自动拼接/api/**</span><br>        <span class="hljs-attr">predicates:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/**</span><br>        <span class="hljs-attr">filters:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=gateway-env,</span> <span class="hljs-string">springcloud-gateway</span>  <span class="hljs-comment">#添加请求头,key:gateway-env,values:springcloud-gateway</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">CircuitBreaker</span><br>            <span class="hljs-attr">args:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">myCircuitBreaker</span><br>              <span class="hljs-attr">fallbackUri:</span> <span class="hljs-string">forward:/api/yangapi/fallback</span>   <span class="hljs-comment"># 如果访问不通，则降级访问其他uri</span><br>              <span class="hljs-attr">timeout:</span> <span class="hljs-number">2000</span>  <span class="hljs-comment">#超时时间2000  响应超过2秒降级访问fallback页面</span><br><br><span class="hljs-attr">resilience4j:</span><br>  <span class="hljs-attr">circuitbreaker:</span><br>    <span class="hljs-attr">configs:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment">#默认</span><br>        <span class="hljs-attr">ringBufferSizeInClosedState:</span> <span class="hljs-number">100</span><br>        <span class="hljs-attr">ringBufferSizeInHalfOpenState:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">failureRateThreshold:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">waitDurationInOpenState:</span> <span class="hljs-number">5000</span><br>        <span class="hljs-attr">slidingWindowSize:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">registerHealthIndicator:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">myCircuitBreaker:</span> <span class="hljs-comment">#实例</span><br>        <span class="hljs-attr">ringBufferSizeInClosedState:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">ringBufferSizeInHalfOpenState:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">failureRateThreshold:</span> <span class="hljs-number">60</span><br>        <span class="hljs-attr">waitDurationInOpenState:</span> <span class="hljs-number">8000</span><br>        <span class="hljs-attr">slidingWindowSize:</span> <span class="hljs-number">15</span><br>        <span class="hljs-attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">registerHealthIndicator:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>接口提供方报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens<br></code></pre></td></tr></table></figure><p><em><strong>解决：</strong></em></p><ol><li>将访问路径从<a href="https://localhost:8080改为http://localhost:8080">https://localhost:8080改为http://localhost:8080</a></li><li>Tomcat的header缓冲区大小不够</li><li>ssl证书到期了</li><li>原因3: 修改端口号</li></ol><hr><h2 id="Rpc"><a href="#Rpc" class="headerlink" title="Rpc"></a>Rpc</h2><p>实现概念图：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230811103226241.png" alt="image-20230811103226241"></p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos/">nacos注册中心的配置</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.nacos<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>nacos-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yml配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Dubbo配置</span><br><span class="hljs-comment">#生产者端</span><br><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 消费者相关配置</span><br><span class="hljs-comment">#  consumer:</span><br><span class="hljs-comment">#    # 结果缓存(LRU算法)</span><br><span class="hljs-comment">#    # 会有数据不一致问题 建议在注解局部开启</span><br><span class="hljs-comment">#    cache: false</span><br><span class="hljs-comment">#    # 支持校验注解</span><br><span class="hljs-comment">#    validation: true</span><br><span class="hljs-comment">#    # 超时时间</span><br><span class="hljs-comment">#    timeout: 3000</span><br>    <span class="hljs-comment"># 初始化检查</span><br><span class="hljs-comment">#    check: false</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">yangapi-backend</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-comment"># dubbo 协议端口(-1表示自增端口,从20880开始)</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">20880</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">id:</span> <span class="hljs-string">nacos-registry</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">nacos://127.0.0.1:8848</span><br><br><span class="hljs-comment">#消费者端</span><br><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">yangapi-backend</span><br>  <span class="hljs-attr">protocol:</span><br>    <span class="hljs-comment"># dubbo 协议端口(-1表示自增端口,从20880开始)</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">20881</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">dubbo</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">id:</span> <span class="hljs-string">nacos-registry</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">nacos://127.0.0.1:8848</span><br>    <br></code></pre></td></tr></table></figure><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p><em><strong>配置：</strong></em></p><ol><li><strong>修改<code>conf/</code>路径下的配置文件<code>application.properties</code> 将下图中的数据库配置注释放开，同时修改数据库账户和密码； 此中的数据库<code>nacos</code>与步骤3中建立的数据库名保持一致；</strong></li></ol><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230811125003825.png" alt="image-20230811125003825"></p><ol start="2"><li><strong>本地创建MYSQL数据库nacos，导入解压文件夹中的mysql-schema.sql脚本</strong></li></ol><p><em><strong>启动：</strong></em></p><ol><li><p>单机：<strong>startup.cmd -m standalone</strong></p></li><li><p>集群默认双击：<strong>startup.cmd</strong></p></li><li><p>修改config目录的application.properties，修改如下：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230811125515389.png" alt="image-20230811125515389"></p></li></ol><p><em><strong>进入管理页面：</strong></em></p><p> <a href="http://192.168.150.105:8848/nacos/index.html">http://192.168.150.105:8848/nacos/index.html</a></p><p>账号密码：nacos</p><h3 id="示例配置："><a href="#示例配置：" class="headerlink" title="示例配置："></a>示例配置：</h3><ol><li>服务调用类必须在同一包下，建议是抽象出一个公共项目（放接口、实体类等）</li><li>设置注解（比如启动类的 EnableDubbo、接口实现类和 Bean 引用的注解）</li><li>添加配置</li><li>服务调用项目和提供者项目尽量引入相同的依赖和配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.apache.dubbo/dubbo --&gt;</span><br> &lt;dependency&gt;<br>     &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;<br>     &lt;artifactId&gt;dubbo&lt;/artifactId&gt;<br>     &lt;version&gt;<span class="hljs-number">3.1</span><span class="hljs-number">.3</span>&lt;/version&gt;<br> &lt;/dependency&gt;<br> &lt;dependency&gt;<br>     &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;<br>     &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;<br>     &lt;version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.0</span>&lt;/version&gt;<br> &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="bug-1"><a href="#bug-1" class="headerlink" title="bug"></a>bug</h2><ol><li><p>前端修改信息有一个问题，修改信息时，没有传递id列，导致修改后id列传给后端的id为null，后端因为id不能为空所以系统报错。</p><p>解决方法应该修改前端，让前端修改时带上id。</p></li><li><p>接口返回报错：</p></li><li><pre><code class="hljs">2023-08-10 19:56:43.091  WARN 21476 --- [nio-8090-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method &#39;POST&#39; not supported]2023-08-10 19:56:43.091  WARN 21476 --- [nio-8090-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method &#39;POST&#39; not supported]<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>   解决方法：层层打断点排查，最后确定是网关层面问题，请求的接口是获取新闻列表，到网关之后处理改为了我写的降级处理的错误页面，导致请求为post，倒是fallback为get请求，最后删掉降级处理的配置url，成功解决问题<br><br><span class="hljs-number">4</span>. ```<br>   request start，id: ffa537ac-<span class="hljs-number">5</span>bc2-<span class="hljs-number">43</span>b7-<span class="hljs-number">9</span>ad8-<span class="hljs-number">886218</span>cb8bce, path: /api/analysis/<span class="hljs-attribute">top</span>/interface/invoke, ip: <span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">1</span>, params: []<br>   <span class="hljs-number">2023</span>-<span class="hljs-number">08</span>-<span class="hljs-number">12</span> <span class="hljs-number">01</span>:<span class="hljs-number">05</span>:<span class="hljs-number">25.853</span> ERROR <span class="hljs-number">25032</span> --- <span class="hljs-selector-attr">[nio-7529-exec-3]</span> c<span class="hljs-selector-class">.y</span><span class="hljs-selector-class">.p</span><span class="hljs-selector-class">.exception</span><span class="hljs-selector-class">.GlobalExceptionHandler</span>   : runtimeException<br>   <br>   org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ibatis</span><span class="hljs-selector-class">.binding</span><span class="hljs-selector-class">.BindingException</span>: Invalid bound statement (not found): com<span class="hljs-selector-class">.yangapi</span><span class="hljs-selector-class">.project</span><span class="hljs-selector-class">.mapper</span><span class="hljs-selector-class">.UserInterfaceInfoMapper</span>.listTopInvokeInterfaceInfo<br></code></pre></td></tr></table></figure></code></pre></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存</title>
    <link href="/2023/09/14/%E7%BC%93%E5%AD%98/"/>
    <url>/2023/09/14/%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="缓存技术"><a href="#缓存技术" class="headerlink" title="缓存技术"></a>缓存技术</h2><p>分布式缓存</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>操作redis的客户端：</p><ol><li><p>Jedis</p><p>独立于spring操作redis的java客户端</p></li><li><p>Lettuce</p><p>高阶操作redis的java客户端</p><p>使用lettuce做redis连接池(复用)</p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.lettuce/lettuce-core --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置连接池:</li></ol></li><li><p>Redisson</p><p>分布式操作redis的java客户端</p></li></ol><p>– etcd</p><p>– memcached</p><p>– 单机缓存</p><p>– ehcache</p><p>– 本地缓存</p><p>– guava</p><h2 id="spring-data-redis"><a href="#spring-data-redis" class="headerlink" title="spring data redis"></a>spring data redis</h2><ol><li>redis数据结构</li></ol><ul><li><p>string</p></li><li><p>set</p></li><li><p>zset</p></li><li><p>hash</p></li><li><p>list</p></li></ul><ol start="2"><li>高级数据结构</li></ol><ul><li><p>boomfilter（布隆过滤器）</p></li><li><p>geo(计算地理位置)</p></li><li><p>hyperloglog(pv&#x2F;uv)</p></li><li><p>pub&#x2F;sub(发布订阅，类似消息队列)</p></li><li><p>BitMap(用于存储大量被压缩的信息)</p></li></ul><p>首页展示推荐用户内容短时间内不会改变的数据，使用缓存redis，在六条数据的情况下，加上缓存之后查询速度由90ms左右变为30ms左右，虽然数据量小存在偶然性，但是在大数据量情况下，缓存的查询速率会快很多。</p><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><ol><li>定时</li><li>模拟触发(手动触发)</li></ol><p><strong><font color="greeny">缓存预热的问题对象：</font></strong></p><p>当数据更新时，第一个用户的请求总是会查询数据库，所以第一个人查询的速度会很慢，如果第一个使用的人是你的老板，那你直接可以毕业了。</p><p><strong>实现</strong></p><p>定时任务，刷新所有用户的推荐列表</p><p><strong>重要</strong></p><ol><li>缓存预热的使用场景：新增，修改信息少，总用户多</li><li>缓存空间不能太大，预留给其他缓存空间</li><li>缓存数据的周期，看场景</li></ol><h2 id="定时任务开启"><a href="#定时任务开启" class="headerlink" title="定时任务开启"></a>定时任务开启</h2><h3 id="1、xxl-job-开源定时任务框架"><a href="#1、xxl-job-开源定时任务框架" class="headerlink" title="1、xxl-job(开源定时任务框架)"></a>1、xxl-job(开源定时任务框架)</h3><h3 id="2、spring-scheduled"><a href="#2、spring-scheduled" class="headerlink" title="2、spring scheduled"></a>2、spring scheduled</h3><p>开启：</p><ol><li>SpringBootApplication里加上<code>@EnableScheduling</code>注解</li><li>定时任务类上加上<code>@Component</code>,注册为Bean，交给容器管理</li><li>任务方法上加上<code>@Scheduled(cron = &quot;0 4 0 * * *&quot;)</code></li><li>@Scheduled用于编写一个定时任务或方法，<code>cron = &quot;0 4 0 * * *&quot;</code>表示该方法将在每天的凌晨0点4分触发执行。</li></ol><p>cron表达式：</p><ul><li><p>第一部分为 “0” 表示任务将在每一分钟的第0秒开始执行。</p></li><li><p>第二部分为 “4” 表示任务将在每小时的第4分钟执行。</p></li><li><p>第三部分为 “0” 表示任务将在每天的0点执行。</p></li><li><p>第四、第五和第六部分使用 “ * “ 表示通配符，表示每天、每月和每周都适用。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>缓存</category>
      
    </categories>
    
    
    <tags>
      
      <tag>优化</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springMvc注解及其用法</title>
    <link href="/2023/08/16/springMvc%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/"/>
    <url>/2023/08/16/springMvc%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="springMvc注解及其用法"><a href="#springMvc注解及其用法" class="headerlink" title="springMvc注解及其用法"></a>springMvc注解及其用法</h1><ol><li><p><code>@Controller</code>：用于标识一个类为控制器，处理请求并返回响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">// 控制器方法...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RestController</code>：与<code>@Controller</code>类似，但它还会自动将方法的返回值转换为JSON格式，常用于构建RESTful API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">// 控制器方法...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RequestMapping</code>：用于将请求映射到方法或类上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userList&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>：用于将GET、POST、PUT、DELETE请求映射到方法上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@PathVariable</code>：用于从URL路径中获取路径变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RequestParam</code>：用于从请求参数中获取参数的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@RequestBody</code>：用于将请求体中的JSON或XML数据绑定到方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ResponseBody</code>：用于将方法的返回值直接作为响应体返回给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ModelAttribute</code>：用于将请求参数绑定到方法的参数上，并将其添加到模型中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@ModelAttribute(&quot;user&quot;)</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userDetail&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@Valid</code>：用于启用参数的校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>        <span class="hljs-comment">// 处理逻辑...</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>@ControllerAdvice<br>作用：<br>1、全局异常处理<br>2、全局数据绑定<br>3、全局数据预处理<br>示例:<br>使用 @ControllerAdvice 实现全局异常处理，只需要定义类，添加该注解即可定义方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">customException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        mv.addObject(<span class="hljs-string">&quot;message&quot;</span>, e.getMessage());<br>        mv.setViewName(<span class="hljs-string">&quot;myerror&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>@ExceptionHandler</code>：处理控制器方法中抛出的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception ex)</span> &#123;<br>        <span class="hljs-comment">// 处理异常...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-string">&quot;Error occurred&quot;</span>, HttpStatus.INTERNAL_SERVER_ERROR);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>注解</tag>
      
      <tag>restful风格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库表字段设计注意事项</title>
    <link href="/2023/08/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2023/08/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库-Mysql-设计优化"><a href="#数据库-Mysql-设计优化" class="headerlink" title="数据库(Mysql)设计优化"></a>数据库(Mysql)设计优化</h1><h2 id="Int数据类型"><a href="#Int数据类型" class="headerlink" title="Int数据类型"></a>Int数据类型</h2><h3 id="int、bigint、smallint-和-tinyint的区别"><a href="#int、bigint、smallint-和-tinyint的区别" class="headerlink" title="int、bigint、smallint 和 tinyint的区别"></a>int、bigint、smallint 和 tinyint的区别</h3><table><thead><tr><th align="center">数据类型</th><th>范围</th><th>存储大小</th></tr></thead><tbody><tr><td align="center">bigint</td><td>-2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807)</td><td>8字节</td></tr><tr><td align="center">int</td><td>-2^31 (-2,147,483,648) 到 2^31 – 1 (2,147,483,647) 的整型数据</td><td>4字节</td></tr><tr><td align="center">smallint</td><td>-2^15 (-32,768) 到 2^15 – 1 (32,767) 的整型数据</td><td>2字节</td></tr><tr><td align="center">tinyint</td><td>无符号（unsigned）： 0 到 255 的整型数据；未设置无符号：-128到127</td><td>1字节</td></tr></tbody></table><ul><li><font color="red"><em><strong>int(M) 在 integer 数据类型中，M 表示最大显示宽度。在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。和数字位数也无关系 int(3)、int(4)、int(8) 在磁盘上都是占用 4 btyes 的存储空间。</strong></em></font></li></ul><h3 id="tinyint的详解"><a href="#tinyint的详解" class="headerlink" title="tinyint的详解"></a>tinyint的详解</h3><h4 id="tinyint有符号和无符号"><a href="#tinyint有符号和无符号" class="headerlink" title="tinyint有符号和无符号"></a>tinyint有符号和无符号</h4><ol><li>tinyint 型的字段如果设置为UNSIGNED类型,只能存储从0到255的整数,不能用来储存负数。</li><li>tinyint 型的字段如果不设置UNSIGNED类型,存储-128到127的整数。</li><li>关于加上unsigned后的说明：加上unsigned属性后就是无符号(范围是0~255的整数,因为是整数,不会有符号”-“,所以就是无符号)</li><li>关于加上zerofill后的说明：zerofill属性会把unsigned属性也给带上,这样就是无符号（范围是0~255，显示长度就是3），同时还会<br>进行前导零填充（没有达到显示长度的数值，例如：你插入1，显示的是001）。</li><li>不加unsigned和zerofill的说明：字段后面不加上这两个属性中的任何一个,就表示是有符号(范围是-128~127,因为有符号”-“,所有是有符号)。</li></ol><h4 id="tinyint-M-详解"><a href="#tinyint-M-详解" class="headerlink" title="tinyint(M)详解"></a>tinyint(M)详解</h4><ul><li><font color="red">*** tinyint后面的括号带的数字,以后称之为M,和存贮的值没有任何关系,只是在某些情况下和显示的宽度有关系。***</font></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-----------------------------------------</span><br><span class="hljs-comment">-- 验证tinyint是否设置符号区别</span><br><span class="hljs-comment">-----------------------------------------</span><br><span class="hljs-comment">-- 创建表test，设置无符号类型tinyint</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `test` (<br>`id` <span class="hljs-type">INT</span> ( <span class="hljs-number">11</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`str` <span class="hljs-type">VARCHAR</span> ( <span class="hljs-number">255</span> ) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`state` TINYINT ( <span class="hljs-number">1</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`state2` TINYINT ( <span class="hljs-number">2</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`state3` TINYINT ( <span class="hljs-number">3</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`state4` TINYINT ( <span class="hljs-number">4</span> ) UNSIGNED ZEROFILL <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY ( `id` ) <br>) ENGINE <span class="hljs-operator">=</span> MyISAM AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-keyword">DEFAULT</span> CHARSET <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">254</span>,<span class="hljs-number">254</span>,<span class="hljs-number">254</span>,<span class="hljs-number">254</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test;<br><span class="hljs-comment">------------------------------------------</span><br>idstrstatestate2state3state4<br><span class="hljs-number">6</span>csdn<span class="hljs-number">6</span>   <span class="hljs-number">06</span> <span class="hljs-number">006</span> <span class="hljs-number">0006</span><br><span class="hljs-number">7</span>csdn<span class="hljs-number">66</span>   <span class="hljs-number">66</span> <span class="hljs-number">066</span> <span class="hljs-number">0066</span><br><span class="hljs-number">8</span>csdn<span class="hljs-number">254</span>   <span class="hljs-number">254</span> <span class="hljs-number">254</span> <span class="hljs-number">0254</span><br><span class="hljs-number">9</span>csdn<span class="hljs-number">255</span>   <span class="hljs-number">255</span> <span class="hljs-number">255</span> <span class="hljs-number">0255</span><br><span class="hljs-comment">------------------------------------------</span><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>有符号<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>,<span class="hljs-number">66</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">127</span>,<span class="hljs-number">127</span>,<span class="hljs-number">127</span>,<span class="hljs-number">127</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testtiny (str,state,state2,state3,state4) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;csdn&#x27;</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> testtiny;<br><br><span class="hljs-comment">------------------------------------------</span><br>idstr  state state2 state3 state4<br><span class="hljs-number">6</span>csdn<span class="hljs-number">6</span>  <span class="hljs-number">6</span>      <span class="hljs-number">6</span>       <span class="hljs-number">6</span><br><span class="hljs-number">7</span>csdn<span class="hljs-number">66</span>  <span class="hljs-number">66</span>  <span class="hljs-number">66</span>       <span class="hljs-number">66</span><br><span class="hljs-number">8</span>csdn<span class="hljs-number">100</span>  <span class="hljs-number">100</span>  <span class="hljs-number">100</span>      <span class="hljs-number">100</span><br><span class="hljs-number">9</span>csdn<span class="hljs-number">127</span>  <span class="hljs-number">127</span>  <span class="hljs-number">12</span>       <span class="hljs-number">127</span><br><span class="hljs-comment">------------------------------------------</span><br></code></pre></td></tr></table></figure><h2 id="varchar数据类型"><a href="#varchar数据类型" class="headerlink" title="varchar数据类型"></a>varchar数据类型</h2><p><em><strong>varchar 存储分为两部分：</strong></em></p><p><strong>archar字段长度 &#x3D; 字符串长度值 + 实际数据长度 N。</strong></p><p>字符串长度值,实际数据长度，需占用 1 或 2 个字节存储。因此我们得出：</p><ul><li>当实际数据长度 &lt;&#x3D; 255 时，varchar字段长度 &#x3D; 1 + N；</li><li>当实际数据长度 &gt; 255 时， varchar字段长度 &#x3D; 2 + N;</li></ul><p>varchar主要根据字段实际使用的长度来分配存储空间</p><p><strong>在数据库设计时，为了节约磁盘存储空间和内存空间，以及应用程序处理效率，建议采用如下方案</strong></p><ul><li><p><strong>字符串实际数据长度N</strong></p></li><li><p><strong>0 &lt; N &lt; &#x3D; 64</strong></p></li></ul><p>​根据实际数据长度N，选择一个相近的2^n长度：</p><p><strong>例如：</strong><br><code> varchar(8),varchar(16),varchar(32),varchar(64)</code></p><p><strong>例子：</strong></p><p>手机号11位，可以选择varchar(16)</p><p><strong>原因：</strong></p><p>1 bytes &#x3D; 8 bit ,一个字节最多可以代表的数据长度是2的8次方 11111111 在计算机中也就是-128到127。</p><p>使用2 ^ n长度使更好的对齐磁盘或内存块。</p><p>对齐块更快。如今“块”的大小更大，内存和磁盘足够快，可以忽略对齐，但对于非常大的块来说是非常重要的。</p><p>64 &lt; N</p><p>根据实际数据长度N，选择一个相近的2^n-1长度：</p><p><strong>例如：</strong><br>varchar(127),varchar(255),varchar(511)，…</p><p><strong>例子：</strong></p><ul><li>收货地址接近100个字符，那么可以选择varchar(127)</li><li>商品名称，接近256个字符，可以选择varchar(255）</li></ul><p><strong>原因：</strong></p><ul><li><p>方便InnoDB建索引，对于 MyISAM，可以对前 1000 个字节做索引，对于 InnoDB，则只有 767 字节。（来源依据）。255X3&#x3D;765</p></li><li><p>少申请一个字节，记录字符串长度，一个8位的tinyint，可以表示的无符号数值的范围是，0-255，如果长度超过了255，需要在申请个字节。</p></li><li><p>磁盘块和内存块对齐</p></li></ul><p><strong>补充说明：</strong><br>varchar(N)长度并不是越长，越好，需要选择一个合适的长度。</p><p>因为：在内存中的操作方式，varchar也是按照最长的方式在内存中进行操作的。比如说要进行排序的时候，varcahr(100)是按照100这个长度来进行的，不合理的长度会浪费内存空间。</p><hr><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/f156ca544bdc9d8e86d3e025a2fd1fdc.png"></p><ul><li><p>固定长度。</p></li><li><p>保存值时，去掉末尾的空格。</p></li><li><p>char常用于很短字符串或长度近似相同的字符串的时候很有用。如存储用户密码的MD5哈希值，它的长度总是一样的。</p></li></ul><p><strong>char优于varchar的地方？</strong></p><ol><li><p>对于经常改变的值，char优于varchar，因为固定长度行不容易产生碎片。——当最长长度远大于平均长度，并且很少发生更新的时候，通常适合使用varchar。</p></li><li><p>对于很短的列，char的效率也是高于varchar的。如对于单字节字符集(如latin1)，char(1)只会占用1个字节，而varchar(2)会占用2个字节(有一个字节用来存储长度的信息)。</p></li></ol><hr><h3 id="varchar"><a href="#varchar" class="headerlink" title="varchar"></a>varchar</h3><ul><li><p>保存可变长字符串。</p><p>理解：比固定长度占用更少的存储空间，因为它只占用自己需要的空间。例外情况：使用ROW_FORMAT&#x3D;FIXED创建的MyISAM表，它为每行使用固定长度的空间，可能会造成浪费。</p></li><li><p>存储长度信息。如果定义的列小于或等于255，则使用1个字节存储长度值，假设使用latin1字符集，如varchar(10)将占用11个字节的存储空间。反过来，varchar(1000)，则占用1002个字节的存储空间。</p></li><li><p>节约空间，对性能有帮助。</p></li><li><p>5.0版本以上，无论是取值还是保存，MySQL都会保留字符串末尾的空格。只分配真正需要的空间</p></li><li><p>使用varchar(5)和varchar(200)保存’hello’占用空间是一样的。——这里应该指的是磁盘上的空间。</p></li><li><p>那么使用较短列有何优势？——巨大的优势</p><p>较大的列会使用更多的内存，因为MySQL通常会分配固定大小的内存块(如varchar(200)会用200个字符大小的内存空间)来保存值(然后对值进行trim操作，最后放入磁盘)或取值。——这对排序或使用基于内存的临时表尤其不好。</p></li></ul><h2 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h2><p><strong>用于保存大量数据:</strong></p><ul><li><p>InnoDB在它们较大的时候会使用“外部”存储区域来进行保存。——所以需要足够的外部存储空间来保存实际的值。</p></li><li><p>排序方式不同于其他字符类型，不会按照完整长度进行排序，而只是按照max_sort_length规定的前若干个字节进行排序。</p></li></ul><h2 id="ENUM-枚举-类型"><a href="#ENUM-枚举-类型" class="headerlink" title="ENUM(枚举)类型"></a>ENUM(枚举)类型</h2><p><strong>特点及优点</strong>:</p><ul><li><p>ENUM(枚举)列可以存储65 535个不同的字符串。</p></li><li><p>以紧凑方式保存。根据列表中值的数量，把它们压缩到1到2个字节中。</p></li><li><p>MySQL在内部把每个值都保存为整数，以表示值在列表中的位置。</p></li><li><p>保留了一份“查找表”，来表示整数和字符串在表的.frm文件中的映射关系。</p></li><li><p>ENUM字符列是固定的，添加、删除字符串须使用ALTER TABLE。</p></li><li><p>在对enum列使用order by的时候，是按数字排序的，而不是字符串排序。</p></li></ul><p><strong>使用案例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_enum_example`  (   <br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,   <br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,   <br>    `color` enum(<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,  <br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE ) <br>    ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <br></code></pre></td></tr></table></figure><p>新建了一张 t_enum_example 表，主要有 id、name、color  3 个字段，这里可以看到，color 字段用 ENUM 类型来定义。ENUM 字段显示的是字符串，但是底层是用整型保存的，每个枚举值都有一个对应的索引，从 1 开始，如下图。</p><table><thead><tr><th>枚举值</th><th>索引</th></tr></thead><tbody><tr><td>blue</td><td>1</td></tr><tr><td>green</td><td>2</td></tr><tr><td>red</td><td>3</td></tr></tbody></table><p>比如，这里要给这张表新增数据，可以这样来新增</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">INSERT INTO `t_enum_example`(`name`, `color`) VALUES (&#x27;笔&#x27;, &#x27;blue&#x27;); <br></code></pre></td></tr></table></figure><p>或者这样</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">INSERT INTO `t_enum_example`(`name`, `color`) VALUES (&#x27;笔&#x27;, 2); <br></code></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th align="center">id</th><th>name</th><th>color</th></tr></thead><tbody><tr><td align="center">1</td><td>笔</td><td>blue</td></tr><tr><td align="center">2</td><td>笔</td><td>red</td></tr><tr><td align="center">3</td><td>笔</td><td>green</td></tr></tbody></table><p>基本用法就是这样，那该不该用 ENUM 类型来定义字段呢，我觉得最好不要用，只要有下面几个点：</p><p><strong>缺点</strong></p><ul><li><p>容易混淆</p><ul><li>因为ENUM 字段底层其实是用整型来存储，比如如果用 ENUM 来存储字符串 ‘3’、’2’、’1’ 这样的数字字符串，那对应的索引就是 1、2、3，要是不熟悉的开发人员，很容易就会造成混淆，新增错误的数据。</li></ul></li><li><p>修改字段频繁</p><ul><li>我们知道对于<a href="https://www.zhihu.com/search?q=%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1318588502%7D">枚举类型</a>，是很有可能会随时增加的，比如上面例子中的 color 字段，要增加一种颜色 ‘black’，那就要修改字段，给字段的<a href="https://www.zhihu.com/search?q=%E6%9E%9A%E4%B8%BE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1318588502%7D">枚举</a>类型增加一种颜色枚举。如果每增加一个枚举，就要修改字段，那代价就太大了。所以一般这种存储类型的字段建议用 TINYINT 来存储。</li></ul></li></ul><h2 id="Data日期时间类型"><a href="#Data日期时间类型" class="headerlink" title="Data日期时间类型"></a>Data日期时间类型</h2><p><strong>一、日期时间型</strong></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/7f50a306b192573246477b93228ec25.png" alt="7f50a306b192573246477b93228ec25"></p><p><strong>二、日期时间型存储需求</strong></p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/956f98af386ea93b550c198a0d96c0f.png" alt="956f98af386ea93b550c198a0d96c0f"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>优化</tag>
      
      <tag>资源节省</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typro配置图床阿里云OSS</title>
    <link href="/2023/07/31/typro%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    <url>/2023/07/31/typro%E9%85%8D%E7%BD%AE%E5%9B%BE%E5%BA%8A%E9%98%BF%E9%87%8C%E4%BA%91OSS/</url>
    
    <content type="html"><![CDATA[<h1>  <center><font color="yellow">typro配置图床</font></center>  </h1><ul><li><p>山东大学镜像源下载pggo</p><p><a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo</a></p></li><li><p>打开pggo配置阿里云oss(自定义域名和网络后缀可不用设置)</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230731010032432.png" alt="image-20230731010032432"></p></li><li><p>设置typro图片上传如下图：</p><p><img src="https://springboot-lcy.oss-cn-hangzhou.aliyuncs.com/img/image-20230731010142777.png" alt="image-20230731010142777"></p></li><li><p>点击验证图片上传选项，显示success即为成功</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>typro配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typro</tag>
      
      <tag>教程</tag>
      
      <tag>图床</tag>
      
      <tag>阿里云OSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redisson的第一次使用</title>
    <link href="/2023/07/30/Redisson%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/30/Redisson%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Redisson的简单使用"><a href="#Redisson的简单使用" class="headerlink" title="Redisson的简单使用"></a>Redisson的简单使用</h1><h2 id="Redisson的快速开始"><a href="#Redisson的快速开始" class="headerlink" title="Redisson的快速开始"></a>Redisson的快速开始</h2><ol><li><p>引入依赖(建议不要使用springboot-starter，版本更迭快)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>新建RedissonConfig配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Redisson配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span> <span class="hljs-comment">//读取application.yml配置</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> String host;  <span class="hljs-comment">//yml中的redis.host映射</span><br>    <span class="hljs-keyword">private</span> String port;  <span class="hljs-comment">//yml中的redis.port映射</span><br>    <span class="hljs-keyword">private</span> Integer database;  <span class="hljs-comment">//yml中的redis.database映射</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;reids://%s:%s&quot;</span>,host,port);<br>        <span class="hljs-comment">//尽量不写死,adress为http地址，http://127.0.0.1:6379/</span><br>        config.useSingleServer()<br>                .setAddress(address)<br>                .setDatabase(database);<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>简单的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//后续使用</span><br><span class="hljs-meta">@Scheduled(cron = &quot;0 4 0 * * *&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCacheRecommendUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;system:precachejob:docache:lock&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">0</span>,<span class="hljs-number">30000</span>, TimeUnit.MILLISECONDS))&#123; <span class="hljs-comment">//l:等待时间,为0表示获取锁失败，就不再尝试再次获取锁,l1:锁的过期时间</span><br><br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception exception)&#123;<br><br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread())&#123; <span class="hljs-comment">//判断要释放锁的线程是否为当前线程</span><br>                lock.unlock(); <span class="hljs-comment">//释放锁</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>3.1 锁续命(看门狗机制)</p><p>实现: 开启一个监听线程，如果方法没有实现完，就给锁续期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">lock.tryLock(<span class="hljs-number">0</span>,<span class="hljs-number">30000</span>, TimeUnit.MILLISECONDS)<br>-&gt; lock.tryLock(<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>, TimeUnit.MILLISECONDS)<br><span class="hljs-comment">//将l1参数改为-1，即可开启看门狗机制（锁续命）</span><br></code></pre></td></tr></table></figure><p>原理：</p><ol><li>任务未执行完成，每十秒续期一次，默认续期三十秒</li><li>如果线程挂掉，（debug）模式下，会被认为服务器宕机，看门狗机制不会生效。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人笔记</title>
    <link href="/2023/07/30/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/30/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<center><font color="blue">苦逼程序员的日常</font></center><ul><li>早起第一件事修理第一天没处理好的博客</li><li>第二天网站进不去</li><li>第三天修修补补还是进不去</li><li>崩溃了</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/30/hello-world/"/>
    <url>/2023/07/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
